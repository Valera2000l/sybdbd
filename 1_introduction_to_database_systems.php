 <meta name="viewport" content="width=device-width, initial-scale=1">
 <link rel="stylesheet" href="css/topic.css">
 <link rel="stylesheet" href="css/style.css">
 <link href="https://fonts.googleapis.com/css?family=Roboto:400,700" rel="stylesheet">
 <link rel="shortcut icon" href="image/icon.png" type="image/x-icon"> 
   <title>Введение</title>


  <header>
    <?php 
     include('nav.php');
    include('reg.php');
    include('cont.php');
    include('user.php');
    ?> 
  </header>
  <main  class="m">
      <div  id="back" ><a href="topic.php" >     &lArr; Назад</a></div>
        <div class="page" id="page"> <p class="title">Введение в системы баз данных</p>

<p class="definition"><svg aria-hidden="true" focusable="false" data-prefix="fas" data-icon="info" class="svg-inline--fa fa-info fa-w-6 " role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 192 512"><path fill="currentColor" d="M20 424.229h20V279.771H20c-11.046 0-20-8.954-20-20V212c0-11.046 8.954-20 20-20h112c11.046 0 20 8.954 20 20v212.229h20c11.046 0 20 8.954 20 20V492c0 11.046-8.954 20-20 20H20c-11.046 0-20-8.954-20-20v-47.771c0-11.046 8.954-20 20-20zM96 0C56.235 0 24 32.235 24 72s32.235 72 72 72 72-32.235 72-72S135.764 0 96 0z"></path></svg><b><u>Информационная система</u></b> – взаимосвязанная совокупность средств, методов и персонала, используемых для хранения, обработки и выдачи информации в интересах достижения поставленной цели.</p>
<p class="p">Современное понимание информационной системы предполагает использование в качестве основного технического средства переработки информации персонального компьютера (сервера, периферийного оборудования и т.д.).
<p class="p">Необходимо понимать разницу между компьютерами и информационными системами. Компьютеры, оснащенные специализированными программными средствами, являются технической базой и инструментом для информационных систем. Информационная система немыслима без персонала, взаимодействующего с компьютерами и телекоммуникациями.
<p class="p">Классифицировать информационные системы можно по различным признакам:
 <ul>
<li><p class="q">   по типу объекта управления (ИС управления технологическим процессом, ИС организационного управления);
<li><p class="q"> по степени интеграции (локальные, интегрированные);
<li><p class="q">  по уровню автоматизации управления (информационно-справочные системы, системы обработки данных, информационно-советующие системы, системы принятия решений, экспертные системы);
<li><p class="q"> по уровню управления (информационные системы управления предприятием, корпорацией, отраслью);
<li><p class="q"> по характеру протекания технологических процессов на объекте управления (автоматизированная система управления дискретным производством, автоматизированная система управления непрерывным производством);
<li><p class="q">  по признаку структурированности задачи;
<li><p class="q">  и другие.
</ul>
<p class="p"><b><u>Информационные системы</u></b> – системы, помогающие производить обработку данных какой-либо определенной области. Информация становится данными в момент ее регистрации.
<p class="definition"><svg aria-hidden="true" focusable="false" data-prefix="fas" data-icon="info" class="svg-inline--fa fa-info fa-w-6 " role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 192 512"><path fill="currentColor" d="M20 424.229h20V279.771H20c-11.046 0-20-8.954-20-20V212c0-11.046 8.954-20 20-20h112c11.046 0 20 8.954 20 20v212.229h20c11.046 0 20 8.954 20 20V492c0 11.046-8.954 20-20 20H20c-11.046 0-20-8.954-20-20v-47.771c0-11.046 8.954-20 20-20zM96 0C56.235 0 24 32.235 24 72s32.235 72 72 72 72-32.235 72-72S135.764 0 96 0z"></path></svg><b><u>Данные</u></b> – это информация представленная в формализованном виде, позволяющем передавать или обрабатывать ее при помощи некоторых процессов и технических средств.
<p class="p">Информационные системы:
  <ul>
<li> <p class="q"> по средству выполнения: ручные, механизированные или автоматизированные;
<li> <p class="q">Выполняемые функции: информационно - поисковые, управляющие, моделирующие, обучающие;
<li> <p class="q"> Области применения: медицинские, финансовые и т.д….
</ul>
<p class="definition"><svg aria-hidden="true" focusable="false" data-prefix="fas" data-icon="info" class="svg-inline--fa fa-info fa-w-6 " role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 192 512"><path fill="currentColor" d="M20 424.229h20V279.771H20c-11.046 0-20-8.954-20-20V212c0-11.046 8.954-20 20-20h112c11.046 0 20 8.954 20 20v212.229h20c11.046 0 20 8.954 20 20V492c0 11.046-8.954 20-20 20H20c-11.046 0-20-8.954-20-20v-47.771c0-11.046 8.954-20 20-20zM96 0C56.235 0 24 32.235 24 72s32.235 72 72 72 72-32.235 72-72S135.764 0 96 0z"></path></svg><b><u>Банк данных (БнД)</u></b> - это одна из форм информационных систем. Банком данных называют систему специальным образом организованных баз данных, программных, технических, языковых и организационно-методических средств, предназначенных для обеспечения централизованного накопления и коллективного многоцелевого использования данных.
<p class="p">В этом определении обозначены характерные основные черты БнД: Базы данных создаются обычно для решения не одной, нескольких связанных задач, не одним, а группой пользователей. В БнД имеются специальные средства, облегчающие для пользователей работу с данными (СУБД).

<p class="p">Основные требования, предъявляемые к БнД:
  <ul>
<li><p class="q">адекватность отображения предметной области (полнота, целостность и непротиворечивость данных, актуальность информации);
<li><p class="q"> возможность взаимодействия пользователей разных категорий, высокая эффективность доступа к данным;
<li><p class="q"> дружелюбность интерфейсов, малое время на обучение;
<li><p class="q"> обеспечение секретности и разграничение доступа к данным для разных пользователей;
<li><p class="q">надежность хранения и защита данных.
  </ul>
<p class="p">Ядром БнД является база данных (БД). 
<p class="definition"><svg aria-hidden="true" focusable="false" data-prefix="fas" data-icon="info" class="svg-inline--fa fa-info fa-w-6 " role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 192 512"><path fill="currentColor" d="M20 424.229h20V279.771H20c-11.046 0-20-8.954-20-20V212c0-11.046 8.954-20 20-20h112c11.046 0 20 8.954 20 20v212.229h20c11.046 0 20 8.954 20 20V492c0 11.046-8.954 20-20 20H20c-11.046 0-20-8.954-20-20v-47.771c0-11.046 8.954-20 20-20zM96 0C56.235 0 24 32.235 24 72s32.235 72 72 72 72-32.235 72-72S135.764 0 96 0z"></path></svg><b><u>База данных</u></b>– это поименованная совокупность взаимосвязанных данных, находящихся под управлением СУБД. 
<p class="p">Метаинформация включает в себя описание структуры БД (схемы и подсхемы), модель предметной области, информацию о пользователях и их правах, описание формы входных и выходных документов. 
<p class="p">Централизованное хранилище метаинформации называется словарем данных. Особенно большое значение имеют словари данных в системах автоматизированного проектирования ИС. 
<p class="p">Администратором БД являются лицо или группа лиц, отвечающих за выработку требований к БД, ее созданию, проектированию, сопровождению и эффективному использованию. 
<p class="definition"><svg aria-hidden="true" focusable="false" data-prefix="fas" data-icon="info" class="svg-inline--fa fa-info fa-w-6 " role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 192 512"><path fill="currentColor" d="M20 424.229h20V279.771H20c-11.046 0-20-8.954-20-20V212c0-11.046 8.954-20 20-20h112c11.046 0 20 8.954 20 20v212.229h20c11.046 0 20 8.954 20 20V492c0 11.046-8.954 20-20 20H20c-11.046 0-20-8.954-20-20v-47.771c0-11.046 8.954-20 20-20zM96 0C56.235 0 24 32.235 24 72s32.235 72 72 72 72-32.235 72-72S135.764 0 96 0z"></path></svg><b><u>Вычислительная система</u></b> – совокупность взаимосвязанных и согласованно действующих ЭВМ или процессоров и других устройств, обеспечивающих автоматизацию процессов приема, обработки и выдачи информации потребителям. 
<p class="p">Программные средства СУБД подразделяют на:
  <ul>
<li> <p class="q"> ядро СУБД, которое обеспечивает ввод, вывод , обработку и хранение данных в БД;
<li>    <p class="q"> трансляторы, обеспечивающие перевод языка СУБД на некоторый внутренний язык, используемый ядром;
 <li>     <p class="q"> утилиты, которые служат для настройки системы, отладки программ, архивирования и восстановления БД, сбора статистики;
 <li>       <p class="q"> прикладные программы, которые служат для обработки запросов к БД. Операционную систему иногда включают в состав банка данных, так как СУБД тесно взаимодействует с ОС в процессе работы.
   </ul>
<p class="p">Языковые средства обеспечивают взаимодействие пользователей с БД. Язык обычно включает в себя средства спецификации данных, отчетов; экранных форм, запросов и процедурные средства для описания последовательности решения задач. Язык СУБД может быть универсальным языком программирования с включением специфического подъязыка для работы с БД, например, языки универсальных систем программирования DELPHI, Visual Basic 5,Visual C++ включают язык SQL. Другие СУБД имеют специализированные языки,например, dBASE, FoxPro, Clipper, Paradox, Access. Некоторые СУБД используют только язык SQL (SQL- серверы). 
<p class="p">Технические средства включают в себя универсальную ЭВМ, периферийные средства ввода/вывода информации, средства работы в сети.
<p class="p"><b><u>Организационно - методические средства</u></b> – это инструкции, методические и регламентные материалы для пользователей.
<p class="p">Персонал - это специалисты, которые обеспечивают создание, работу и развитие БнД.


<p class="definition"><svg aria-hidden="true" focusable="false" data-prefix="fas" data-icon="info" class="svg-inline--fa fa-info fa-w-6 " role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 192 512"><path fill="currentColor" d="M20 424.229h20V279.771H20c-11.046 0-20-8.954-20-20V212c0-11.046 8.954-20 20-20h112c11.046 0 20 8.954 20 20v212.229h20c11.046 0 20 8.954 20 20V492c0 11.046-8.954 20-20 20H20c-11.046 0-20-8.954-20-20v-47.771c0-11.046 8.954-20 20-20zM96 0C56.235 0 24 32.235 24 72s32.235 72 72 72 72-32.235 72-72S135.764 0 96 0z"></path></svg><b><u>История развития баз данных</u></b> – история развития систем управления данными во внешней памяти. Основной проблемой, обусловившей развитие теории и практики баз данных, является обеспечение надежного контролируемого хранения необходимых данных между сеансами работы, их передачи между рабочими местами и эффективного их извлечения по мере необходимости.
<p class="p">В истории развития баз данных можно выделить следующие этапы:
<p class="q"><b>1.</b> Файлы и файловые системы.
<p class="q"><b>2.</b> Базы данных на больших ЭВМ. Первые СУБД.
<p class="q"><b>3.</b> Эпоха персональных компьютеров. Настольные СУБД.
<p class="q"><b>4.</b> Распределенные базы данных.
<p class="p">История СУБД насчитывает более 40 лет.
<p class="p">В 1968 году была введена в эксплуатацию первая промышленная СУБД – система IMS фирмы IBM.
<p class="p">В 1975 году появился первый стандарт СУБД, разработанный ассоциацией по языкам систем обработки данных – Conference of Data System Language (CODASYL). Этот стандарт определил ряд фундаментальных понятий в теории систем баз данных, которые до сих пор являются основополагающими для сетевой модели данных.
<p class="p">В 1981 году Э.Ф.Кодд создал реляционную модель данных и применил к ней операции реляционной алгебры.
<p class="p">Недостатки файловой системы (зависимость программ от данных, невозможность параллельной работы с данными, отсутствие разграничения прав доступа) привели к появлению понятия баз данных. 


<p class="p">Под базой данных понимается «совокупность взаимосвязанных данных, организованных в соответствии со схемой базы данных таким образом, чтобы с ними мог работать пользователь»
<p class="definition"><svg aria-hidden="true" focusable="false" data-prefix="fas" data-icon="info" class="svg-inline--fa fa-info fa-w-6 " role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 192 512"><path fill="currentColor" d="M20 424.229h20V279.771H20c-11.046 0-20-8.954-20-20V212c0-11.046 8.954-20 20-20h112c11.046 0 20 8.954 20 20v212.229h20c11.046 0 20 8.954 20 20V492c0 11.046-8.954 20-20 20H20c-11.046 0-20-8.954-20-20v-47.771c0-11.046 8.954-20 20-20zM96 0C56.235 0 24 32.235 24 72s32.235 72 72 72 72-32.235 72-72S135.764 0 96 0z"></path></svg><b><u>База данных (database)</u></b> – это организованная совокупность совместно используемых логически связанных данных и описаний этих данных, относящаяся к определенной предметной области, предназначенная для удовлетворения информационных потребностей различных пользователей.
<p class="q"><b>1.</b> База данных представляет собой долговременное хранилище данных, структура которого определяется на этапе проектирования БД.
<p class="q"><b>2.</b> Находящиеся в БД данные являются общекорпоративным ресурсом, в котором вместо отдельных файлов, разбросанных по отделам и службам предприятия, данные собраны вместе с минимальной избыточностью.
<p class="q"><b>3.</b> В БД хранятся не только рабочие данные, описывающие какую-то предметную область, но и метаданные, предназначенные для описания структуры самих данных. Такую важную способность БД часто называют самодокументированием.
<p class="q"><b>4.</b> Потребителем данных может выступать не только человек, но и программно-аппаратные комплексы (станки с числовым программным управлением, автоматизированные системы управления, робототехнические системы и т. д.), именно поэтому в определении говорится об удовлетворении информационных потребностей не просто пользователей, а организации в целом.


<p class="p"><b><h3>Принцип построения систем файлов</h3></b>
<p class="p">Рассмотрим в общих чертах идею построения систем, основанных на файлах. Допустим, что мы планируем создать программу, хранящую сведения о сотрудниках предприятия.
<p class="p">Во-первых, он готовит структуру, подходящую для хранения данных. Для этого программист просматривает список персонала и выясняет максимальное число символов в фамилии, имени и отчестве (допустим, это значения: 20–15–15 байт). Затем программист выделяет какое-то число байтов для хранения названия должности, даты рождения и остальных подлежащих учету элементов структуры. Узнав все необходимые размерности, разработчик описывает структуру непосредственно в коде программы.
 <p class="p"><center><img src="lectures/1.png" width="700" height="150" class="top_img" /></center>
<p class="p">Во-вторых, программистом разрабатываются процедуры, осуществляющие  основные операции по работе с файлом. Как минимум это добавление новой записи, редактирование, удаление и просмотр записи.
<p class="p">Ни одну из этих операций невозможно осуществить без знания размерности и состава полей исходной структуры. При вставке новой строки в файл к нему следует добавить N байт, причем процедура добавления должна знать, что фамилия начинается с 1-го байта, имя – с 21-го и т. д.
<p class="p">При просмотре файла необходимо осуществлять последовательные операции чтения порциями, пропорциональными размеру отдельной записи N байт; опять же, процедура чтения должна обладать информацией – сколько байт отводится тому или иному полю. В свою очередь, операции редактирования и удаления также не являются исключением из правил и нуждаются в знаниях об исходной структуре.
<p class="q"><b>1)</b> зависимость от данных;
<p class="q"><b>2)</b> разделение и изоляция данных (Системы, основанные на файлах, объединяют в себе десятки отдельных файлов с данными. В одном файле хранятся данные о сотрудниках фирмы, в другом – сведения о клиентах, в третьем – перечень предоставляемых услуг, в четвертом – список заказов и т. д. Для извлечения логически связанных данных (допустим, о клиентах и их заказах) программисту приходилось выдумывать замысловатые алгоритмы синхронного чтения из двух файлов.);
<p class="q"><b>3)</b> избыточность данных (Система децентрализованного хранения данных систем, основанных на файлах на нескольких машинах, приводила к тому, что одни и те же сведения повторялись на магнитных носителях многих мини-ЭВМ, разбросанных по учреждению, идентичные копии, аномалии данных);
<p class="q"><b>4)</b> несовместимость файлов;
<p class="q"><b>5)</b> разрастание количества приложений (у вас нет средств упорядочивания и поиска данных, каждый новый запрос приводит к цепной реакции – бесконечной переработке исходного приложения).
<p class="p">Идея построения первых БД на принципах электронных картотек просуществовала сравнительно недолго и была отвергнута. Ограничения систем, основанных на файлах, вошли в непримиримое противоречие с возрастающими требованиям к хранению и обработке больших массивов данных.
  <p class="p"><b><center>Эволюция моделей реализации данных</center></b>
 <p class="p"><img src="lectures/2.png" width="700" height="450" class="top_img"  />

<p class="p">Модель создается в том случае, когда проведение исследований на реальном объекте невозможно (по финансовым, экономическим, этическим, техническим или любым другим причинам) в процессе моделирования ученые отбрасывают малозначимые детали, уделяя первоочередное внимание ключевым характеристикам модели. Модель базы данных призвана отражать реальные и виртуальные объекты окружающего мира, информацию о которых мы планируем хранить и обрабатывать в разрабатываемых информационных системах. Чем точнее модель отражает действительность – тем она полезнее и, как следствие, лучше база данных.
<p class="p">На сегодняшний момент времени подавляющее большинство современных баз данных ориентировано на реляционную модель. Это простейшие однопользовательские системы типа Microsoft Access и SQLite и сложные клиент-серверные системы SQL Server компании Microsoft, Informix, Oracle, InterBase, MySQL.
<p class="definition"><svg aria-hidden="true" focusable="false" data-prefix="fas" data-icon="info" class="svg-inline--fa fa-info fa-w-6 " role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 192 512"><path fill="currentColor" d="M20 424.229h20V279.771H20c-11.046 0-20-8.954-20-20V212c0-11.046 8.954-20 20-20h112c11.046 0 20 8.954 20 20v212.229h20c11.046 0 20 8.954 20 20V492c0 11.046-8.954 20-20 20H20c-11.046 0-20-8.954-20-20v-47.771c0-11.046 8.954-20 20-20zM96 0C56.235 0 24 32.235 24 72s32.235 72 72 72 72-32.235 72-72S135.764 0 96 0z"></path></svg><b><u>Система управления базами данных (Database Management System, DBMS)</u></b> – это комплекс программных средств, с помощью которого можно создавать и поддерживать базу данных, а также осуществлять к ней контролируемый доступ пользователей.
<p class="p">Различают персональные и многопользовательские СУБД. Персональные системы предназначены для создания небольших БД, устанавливаемых на одном компьютере, поэтому их часто называют настольными. В противовес персональным, многопользовательские системы предназначены для обслуживания БД, находящихся в совместном владении несколькими пользователями. Есть и другие классификационные признаки, например по способам разработки приложений БД (ручное кодирование и автоматическая генерация форм), по возможностям определения данных, особенностям обработки транзакций, используемой ОС, по экономическим параметрам.
<p class="p">В самом общем случае работу СУБД можно описать следующим образом:
<p class="q"><b>1.</b> Пользователь запрашивает у системы разрешение на доступ к данным.
<p class="q"><b>2.</b> СУБД анализирует запрос и проверяет права пользователя на осуществление запрашиваемой операции.
<p class="q"><b>3.</b> СУБД выполняет требуемые действия с данными и при необходимости возвращает результат пользователю.

<p class="p"><u><b><h3>Функции СУБД</h3></b></u>
<p class="p">1.<i><b> Доступность данных. </b></i>Предоставление пользователю возможности вставлять, редактировать, удалять и извлекать данные из БД. При осуществлении любой из операций пользователь не должен вникать в особенности физической реализации системы, т. е. все операции должны быть прозрачны.
<p class="p">2.<i><b> Метаописание данных.</b></i> СУБД должна предоставлять системный каталог, в котором содержится: описание хранимых в БД данных; описание связей между данными; ограничения целостности данных; регистрационные данные пользователей и другая служебная информация. Благодаря метаданным БД становится доступной внешним приложениям, упрощается понимание смысла данных, усиливаются меры безопасности, может выполняться аудит информации.
<p class="p">3.<i><b> Управление параллельностью.</b></i> Реализация механизма одновременного многопользовательского (параллельного) доступа к обрабатываемым данным с гарантией корректного обновления этих данных. Умение предоставить нескольким пользователям совместный доступ к разделяемым ресурсам – это едва ли не самая сложная задача, решаемая СУБД. СУБД должна суметь избежать конфликта совместного доступа двух или большего числа пользователей к одним и тем же строкам таблицы, или, по крайней мере, исключить какие-либо нежелательные последствия при возникновении конфликта.
<p class="p">4.<i><b> Обработка данных в рамках транзакции.</b></i> СУБД гарантирует, что БД будет всегда находиться в непротиворечивом состоянии вне зависимости от любых сбоев при проведении операций обновления данных. Для этого операции с данными (в первую очередь вставки, редактирования и удаления) объединяются в единый блок, называемый транзакцией. Все операторы транзакции должны быть выполнены корректно и полностью, только в этом случае в БД будут зафиксированы изменения. В противном случае осуществляется автоматический откат транзакции, т. е. состояние БД будет восстановлено на момент времени, предшествующий вызову транзакции. 
<h6><p class="q">Пример: <i>Представьте себе, что вы снимаете какую-то сумму наличных денег в одном из банкоматов вашего города. Вы уже ввели свой код доступа, указали требуемую сумму, эта сумма денег списана с вашего электронного счета и «бежит» по проводам из банка к вам в руки. И вдруг из-за сбоя питания, или отказа коммуникационного оборудования, или по какой-то другой технической причине команда на выдачу денег в банкомат не дошла. Что в результате? Вы потеряли свои деньги? К счастью, нет. Программное обеспечение банковских платежных систем увидит, что одна из операций транзакции завершена некорректно. Поэтому все изменения, сделанные указанной транзакцией, подлежат отмене – списанные электронные деньги вновь вернутся к вам на банковский счет. Вам остается повторить операцию получения наличных в другом банкомате.</i></h6>
<p class="p">5.<i><b> Обеспечение целостности данных.</b></i> Все содержащиеся в БД данные должны быть корректны и непротиворечивы. Это означает, что данные в таблицах могут модифицироваться только в соответствии с утвержденными правилами. В самом общем случае можно говорить о существовании трех правил поддержания целостности данных: целостность доменов, целостность отношений, целостность связей между отношениями. Кроме того, разработчик имеет возможность описывать свои собственные бизнес-правила, которые мы станем называть корпоративными ограничениями.
<p class="p">6.<i><b> Восстановление данных.</b></i> В случае непредвиденных ошибок и сбоев, приведших к повреждению или разрушению данных, СУБД должна обладать возможностью восстанавливать пострадавшие данные. В первую очередь эта функция реализуется с помощью процедур резервного копирования.
<p class="p">7.<i><b> Обмен данными.</b></i> СУБД обязана поддерживать современные сетевые технологии и предоставлять доступ к БД удаленным персональным компьютерам.
<p class="p">8.<i><b> Контроль за доступом к данным.</b></i> Доступ к данным могут осуществлять только зарегистрированные в СУБД пользователи в соответствии с назначенными администратором СУБД им правами.
<p class="p">Современные системы предоставляют нам средства мониторинга, сервисы статистического анализа, утилиты экспорта/импорта данных, развитые средства проектирования БД и прикладного программного обеспечения, инструменты реорганизации файлов данных и индексных данных, службы аудита и многое другое. Однако все дополнительные сервисы и службы выполняют вспомогательную роль, а основы жизнедеятельности СУБД определяются перечисленными выше функциями.
<p class="p">Для того чтобы СУБД оказалась в состоянии предоставлять минимальный набор из рассмотренных выше восьми сервисов, она должна состоять из <b>набора компонентов</b>.

<p class="p"><b>Над верхним уровнем системы расположены потребители услуг СУБД:</b>
 <ul>
<li> <p class="q"> администратор БД;
<li> <p class="q"> программисты;
<li> <p class="q"> конечные пользователи.
</ul>
<p class="p">Администратор БД отвечает за планирование и физическую реализацию проекта. Он создает основные объекты БД, определяет правила поддержания целостности и непротиворечивости данных, управляет политикой безопасности, анализирует процесс эксплуатации проекта, контролирует производительность системы – одним словом, поддерживает жизнедеятельность БД. В распоряжении администратора имеются разнообразные средства проектирования БД, эти средства могут входить в состав СУБД в виде дополнительных программных модулей, а могут быть поставлены и сторонними разработчиками. 
<p class="p"><b><center>Обобщенная структура СУБД</center></b>
  <p class="p"><center><img src="lectures/3.png" width="700" height="750" class="top_img"  /></center>
<p class="p">Программисты совместно с администратором трудятся над физическим созданием проекта БД. Основным инструментом прикладного программиста выступают многочисленные среды проектирования.
<p class="p">Основным потребителем услуг СУБД выступает обычный пользователь – в его интересах создаются БД и прикладное программное обеспечение.
<p class="p">Основным средством общения между людьми и базой данных выступает структурированный язык запросов SQL. Поэтому средства проектирования БД, ПО и клиентские приложения БД отправляют в адрес СУБД инструкции на языке SQL. Эти команды поступают на процессор запросов, который преобразует их в набор низкоуровневых команд, понятных ядру СУБД.
<p class="p">К базе данных могут обращаться различные категории пользователей, от руководителя предприятия до случайного посетителя. Одним из них разрешается просматривать и редактировать любые данные, другим могут быть доступны лишь выборочные сведения, третьим вообще не стоит даже знать о существовании БД. Именно поэтому в составе большинства СУБД имеется модуль, отвечающий за контроль прав доступа. В простейшем случае модуль следит за тем, чтобы к БД присоединялись только авторизованные пользователи, для этого полученные во время регистрации пароль и логин потенциального клиента сверяются с хранящимися в системном каталоге учетными записями. В современных многопользовательских СУБД система безопасности значительно сложнее и включает в себя комплекс программных и аппаратных средств защиты.
<p class="p">Убедившись, что инструкция поступила от доверенного лица, модуль контроля прав доступа передает ее в распоряжение процессора команд. В первую очередь процессор убеждается, что поступившая команда не противоречит ограничениям целостности данных. Это зона ответственности модуля контроля целостности данных. На время проверки команды на соответствие ограничениям целостности доменов, сущностей и связей задействуется контроллер системного каталога. Именно он имеет возможность собирать метаданные, в которых прячется техническое описание нашей БД. Поняв, что угрозы целостности нет, процессор передает команду оптимизатору запросов. Задача оптимизатора – найти наиболее эффективный способ выполнения поступивших команд. Наконец, оптимизированная команда компилируется и передается во власть системе управления транзакциями. Система управления транзакциями, во-первых, отвечает за полное и корректное выполнение блока команд и, во-вторых, совместно с планировщиком заданий обеспечивает параллельную многопользовательскую обработку данных. Наконец, блок команд передается в распоряжение контроллеру баз данных. Задача модуля заключается в организации взаимодействия СУБД с файлами БД и файлами системного каталога. При этом для осуществления стандартных операций ввода-вывода задействуются возможности операционной системы.
<p class="p">Все современные СУБД обладают системным каталогом, в котором хранятся следующие сведения:
 <p class="q"><b> 1) </b>описание поддерживаемых типов данных;
 <p class="q"><b>2)</b> описание развернутых БД (схемы данных) и входящих в них объектов (домены, таблицы, представления и т. д.);
 <p class="q"><b>3)</b> сведения об ограничениях целостности;
 <p class="q"><b>4) </b>имена и права пользователей, имеющих доступ к данным;
 <p class="q"><b>5)</b> разнообразная статистика.

<p class="p"><b>Файл-серверные</b>
<p class="p">Одна из ЭВМ (с накопителями на жестких магнитных дисках наибольшего размера) назначалась файловым сервером. На выданной в совместное пользование сетевой папке сервера, кроме обычных документов, размещали и файлы баз данных.
<p class="p">Для того чтобы этой БД могла воспользоваться какая-нибудь из рабочих станций, она обращалась к<i> файловому серверу, перекачивала все файлы БД в свою память, вносила правки и возвращала файлы на прежнее место</i>. Такой способ многопользовательского доступа к БД обладал всего одним преимуществом – простотой реализации. Все остальное было сплошными недостатками:
 <ul>
<li> <p class="q"> на каждой рабочей станции необходимо устанавливать полную копию СУБД;
<li> <p class="q">  во время работы с данными сетевой трафик возрастает до пиковых значений;
<li> <p class="q">  управление параллельностью обработки данных и поддержку целостности реализовать было практически невозможно, в то время как один пользователь сохранял свою порцию данных, другой уже вносил в нее изменения.
</ul>
<p class="p">Программные продукты, ориентированные на индивидуального пользователя и способные предоставить подобный сервис, например Microsoft Access.
<p class="p"><b>Клиент-серверные</b>
<p class="p">Сервер отвечает за предоставление каких-либо услуг клиентскому процессу. Клиент запрашивает у сервера определенные услуги и ресурсы. В клиент-серверных системах БД размещается на отдельном наиболее производительном компьютере, на этом же компьютере разворачивается сервер (это и есть СУБД). На клиентских станциях достаточно установить сравнительно нетребовательное к ресурсам пользовательское ПО и настроить сетевой доступ к серверу СУБД. Работа клиент-серверных систем принципиально отличается от работы в системах «файл-сервер».
<p class="p"><i>Теперь вместо перекачки файлов c БД клиентский компьютер отправляет серверу запрос, построенный на основе языка SQL. Получив и обработав инструкцию SQL, сервер возвращает клиентскому компьютеру результаты ее выполнения, например выборку определенных данных.</i>
<p class="p">Уже несколько десятилетий клиент-серверное построение БД является доминирующим. Причин тому несколько:
<p class="q"><b>1) </b>значительно повышается доступность БД. Сервер представляет собой открытую систему, поэтому клиентские компьютеры могут функционировать под управлением различных операционных систем и с различным ПО;
<p class="q"><b>2)</b> выделенный сервер СУБД в состоянии обеспечить параллельную многопользовательскую обработку данных;
<p class="q"><b>3)</b> основные правила поддержки целостности и непротиворечивости данных описываются на одном сервере СУБД, клиентские приложения никаким образом не в состоянии обойти эти правила;
<p class="q"><b>4)</b> экономно расходуется пропускная способность компьютерных сетей;
<p class="q"><b>5)</b> благодаря централизованному хранению данных сравнительно просто поддерживать единые для всех правила безопасности БД;
<p class="q"><b>6)</b> наличие стандарта на основной язык общения SQL обеспечивает широкие возможности доступа к серверу БД из программного обеспечения различных производителей;
<p class="q"><b>7)</b> упрощены вопросы обслуживания и администрирования БД.
<p class="p">Предусмотрено несколько подходов к распределению обязанностей  между сервером и клиентом. В простейшем случае работает модель тонкий клиент (thin client). Это тот вариант, когда клиентское ПО максимально упрощено и представляет собой только интерфейсную часть, состоящую из форм ввода и просмотра данных. Тонкий клиент фактически отвечает лишь за презентацию данных, поэтому можно сказать, что он не умеет думать и вся программная логика сосредоточена на стороне сервера. толстый клиент старается максимально облегчить работу сервера. Например, реализует дополнительные бизнес-правила, производит сортировку полученных данных на клиентской стороне, выполняет вспомогательные расчеты, проверяет синтаксис инструкций SQL и т. п.
<p class="p">К настоящему времени существует несколько сотен СУБД, предназначенных для работы по модели клиент-сервер. Популярностью пользуются MySQL, Oracle, SQL Server компании Microsoft, InterBase компании Embarcadero, PostgreSQL, Informix компании IBM, NetWare SQL фирмы Novell и т. д.
<p class="p"><b><i>Многоуровневые</i></b> между сервером СУБД и клиентом может появиться еще одно дополнительное звено – сервер приложений. Сервер приложений обычно отвечает за соблюдение бизнес-правил БД, для этого реализуется несколько прикладных функций, которые представляются клиенту в виде отдельных служб. Клиент не может обратиться к СУБД напрямую, вместо этого он запрашивает интересующий его сервис у сервера приложений.
<p class="p"><b>Распределенная система</b>
<p class="p">Системы управления распределенными базами данных (СУРБД) – одно из направлений развития современных технологий хранения данных. Подобные системы предполагают организацию работы с данными, распределенными между несколькими серверами, которые, в свою очередь, могут быть удалены друг от друга на значительные расстояния. Любой из серверов должен обладать возможностью обрабатывать как локальные запросы пользователей в своей подсети, так и слаженно работать с внешними запросами, поступающими из других подсетей. В свою очередь, клиент вправе получать одновременный доступ к интересующим его данным, физически размещенным на разных серверах (в идеале с логической точки зрения клиент вообще может полагать, что он работает с единой, а не распределенной БД).
<p class="p">Распределенные системы могут включать как однотипные (гомогенные), так и разнотипные (гетерогенные) БД. СУБД обслуживают фрагменты БД, между которыми может осуществляться частичная или полная репликация данных. Кроме того, могут использоваться специальные серверы, предназначенные для управления всей системой (например, на них может содержаться глобальный системный каталог схема фрагментации данных между СУБД, средства обработки распределенных запросов и т. д.).
<p class="p"><!-- Online Test Pad Crossword Widget (#44252)-->
<div id="otp_wgt_cdzv6fpsujv2m"></div>
<script type="text/javascript">
    var otp_wjs_dt = (new Date).getTime();
    (function (w, d, n, s, rp) {
        w[n] = w[n] || [];
        rp = {};
        w[n].push(function () {
            otp_render_widget(d.getElementById("otp_wgt_cdzv6fpsujv2m"), 'onlinetestpad.com', 'cdzv6fpsujv2m', rp);
        }); 
        s = d.createElement("script");
        s.type = "text/javascript";
        s.src = "//onlinetestpad.com/js/widget.js?" + otp_wjs_dt;
        s.async = true;
        d.getElementsByTagName("head")[0].appendChild(s);
    })(this, this.document, "otp_widget_callbacks");
</script><p class="p">
	<div class=" btn red d">
		<a href="2_Typical_organization_of_a_modern_DBMS.php">Следующая
			<div class="btn__blobs">
		      <div></div>
		      <div></div>
		      <div></div>
   			</div>
   		</a>
   	</div>
 </div>

</p>
</div>
</main>
<script src="https://snipp.ru/cdn/jquery/2.1.1/jquery.min.js"></script>
    <script src="https://snipp.ru/cdn/jqueryui/1.12.1/jquery-ui.min.js"></script>
      <script type="text/javascript" src="jquery.pjax.js"></script> 
    <script src="https://snipp.ru/cdn/fancybox/2.1.7/source/jquery.fancybox.pack.js"></script>
    <script src="js/registration.js"></script>
    <script src="js/user.js"></script>  
    <script src="js/topic.js"></script>
    