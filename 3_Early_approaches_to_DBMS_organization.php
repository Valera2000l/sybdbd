<meta name="viewport" content="width=device-width, initial-scale=1">
   <link rel="stylesheet" href="css/topic.css">
 <link href="https://fonts.googleapis.com/css?family=Roboto:400,700" rel="stylesheet">
 <link rel="shortcut icon" href="image/icon.png" type="image/x-icon"> 
  <link rel="stylesheet" href="https://snipp.ru/cdn/fancybox/2.1.7/source/jquery.fancybox.css">

   <title>Ранние подходы к организации СУБД</title>


 	<header>
		<?php 
    include('nav.php');
    include('reg.php');
    include('cont.php');
    include('user.php');
    ?> 
	</header>
 	<main  class="m">
  <div  id="back" ><a href="topic.php" >     &lArr; Назад</a></div>

 <div class="page" id="page">
  <p class="p" ><b>РАЗДЕЛ 1. ОСНОВНЫЕ КОНЦЕПЦИИ ОРГАНИЗАЦИИ ДАННЫХ И РЕЛЯЦИОННАЯ МОДЕЛЬ ДАННЫХ</b>
  <p class="title">Тема 1.2. Ранние подходы к организации СУБД</p>
<p class="p">Хранимые в базе данные имеют определенную логическую структуру – иными словами, описываются некоторой моделью представления данных (моделью данных), поддерживаемой <a href="glossary.php#sybd" class="gl" title="Узнать значение">СУБД</a>. 
<p class="definition"><svg aria-hidden="true" focusable="false" data-prefix="fas" data-icon="info" class="svg-inline--fa fa-info fa-w-6 " role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 192 512"><path fill="currentColor" d="M20 424.229h20V279.771H20c-11.046 0-20-8.954-20-20V212c0-11.046 8.954-20 20-20h112c11.046 0 20 8.954 20 20v212.229h20c11.046 0 20 8.954 20 20V492c0 11.046-8.954 20-20 20H20c-11.046 0-20-8.954-20-20v-47.771c0-11.046 8.954-20 20-20zM96 0C56.235 0 24 32.235 24 72s32.235 72 72 72 72-32.235 72-72S135.764 0 96 0z"></path></svg><b><u>Модель данных</u></b> – это совокупность правил порождения структур данных в базе данных, операций над ними, а также ограничений целостности, определяющих допустимые связи и значения данных, последовательность их изменения.
<p class="p"><u>Модель данных состоит из трёх частей:</u>
<p class="q"><b>1. Набор типов структур данных.</b>
Здесь можно провести аналогию с языками программирования, в которых тоже есть предопределённые типы структур данных, такие как скалярные данные, векторы, массивы, структуры (например, тип <i>struct</i> в языке Си) и т.д.
<p class="q"><b>2. Набор операторов или правил вывода</b>, которые могут быть применены к любым правильным примерам типов данных, перечисленных в (1), чтобы находить, выводить или преобразовывать информацию, содержащуюся в любых частях этих структур в любых комбинациях.
<p class="q"><b>3. Набор общих правил целостности</b>, которые прямо или косвенно определяют множество непротиворечивых состояний базы данных и/или множество изменений её состояния.
<p class="p">К числу классических относятся следующие модели данных.
<ul>
<li><p class="q">Иерархическая
<li><p class="q">Сетевая
<li><p class="q">Реляционная
</ul>
<p class="p">Кроме того, в последние годы появились и стали более активно внедряться на практике следующие модели данных:
  <ul>
<li><p class="q">Постреляционная
<li><p class="q">Многомерная
<li><p class="q">Объектно-ориентированная
</ul>
<p class="p">Разрабатываются также всевозможные системы, основанные на других моделях данных, расширяющих известные модели. В их числе можно назвать объектно-реляционные, дедуктивно-объектно-ориентированные, семантические, концептуальные и ориентированные модели. Некоторые из моделей служат для интеграции баз данных, баз знаний и языков программирования.
<p class="p"><h3><b>Иерархическая модель</b></h3>
<p class="p">В иерархической модели связи между данными можно описать с помощью упорядоченного графа (или дерева). Упрощенно представление связей между данными в иерархической модели показано на рис.
<p class="p"><img src="lectures/7.png" width="138" height="91" class="leftimg"  class="top_img" />
  Тип «дерево» схож с типами данных «структура» языков программирования Си, «запись» языка программирования Паскаль. В них допускается вложенность типов, каждый из которых находится на некотором уровне.

<p class="p"><div class="iii>"><center><img src="lectures/8.png" width="531" height="267"  class="top_img" /></center></div>
  <p class="p">Для организации физического размещения иерархических данных в памяти ЭВМ могут использоваться следующие группы методов:
<ul>
<li><p class="q">Представление линейным списком с последовательным распределением памяти (адресная арифметика, левосписковые структуры);
<li><p class="q">Представление связными линейными списками (методы, использующие указатели и справочники)
К основным операциям манипулирования иерархически организованными данными относятся следующие:
<li><p class="q">Поиск указанного экземпляра БД (например дерева со значением 10 в поле Отд_номер);
<li><p class="q">Переход от одного дерева к другому;
<li><p class="q">Переход от одной записи к другой внутри дерева (например к следующей записи типа Сотрудники);
<li><p class="q">Вставка новой записи в указанную позицию;
<li><p class="q">Удаление текущей записи и т.д.
</ul>
<p class="p">В соответствии с определением типа «дерево», можно заключить, что между предками и потомками автоматически поддерживается контроль целостности связей. Основное правило контроля целостности формулируется следующим образом: потомок не может существовать без родителя, а у некоторых родителей может быть не быть потомков. Механизмы поддержания целостности связей между записями различных деревьев отсутствуют. 
<p class="p">К <i><u><b>достоинствам</b></u></i> иерархической модели данных относятся эффективное использование памяти ЭВМ и неплохие показатели времени выполнения основных операций над данными. Иерархическая модель данных удобна для работы с иерархически упорядоченной информацией.
<p class="p"><i><u><b>Недостатком</b></u></i> иерархической модели является ее громоздкость для обработки информации с достаточно сложными логическими связями, а также сложность понимания для обычного пользователя.
<p class="p"><i>Примеры СУБД, использующие иерархическую модель данных:</i>
IMS, PC/Focus, Team-Up, Data Edge, Ока, ИНЭС и МИРИС.
 <p class="p"><h3><b>Сетевая модель</b></h3>
 <p class="p"><img src="lectures/9.png" width="95" height="115" class="leftimg" class="top_img"  />
 <p class="p">Сетевая модель данных позволяет отображать разнообразные взаимосвязи элементов данных в виде произвольного графа, обобщая тем самым иерархическую модель данных. 
 <p class="p">Сетевая БД состоит из набора записей и набора соответствующих связей. На формирование связи особых ограничений не накладывается. Если в иерархических структурах запись-потомок могла иметь только одну запись-предка, то в сетевой модели данных запись-потомок может иметь произвольное число записей (сводных родителей). Физически размещение данных в базах сетевого типа может быть организовано практически теми же методами, что и в иерархических базах данных.
<p class="p"><center><img src="lectures/10.png" width="286" height="190" class="top_img" /></center>
  <p class="p">К числу важнейших операций манипулирования данными баз сетевого типа можно отнести следующие:
<ul>
<li><p class="q">Поиск записи в БД
<li><p class="q">Переход от предка к первому потомку
<li><p class="q">Переход от потомка к предку
<li><p class="q">Создание новой записи
<li><p class="q">Удаление текущей записи
<li><p class="q">Обновление текущей записи
<li><p class="q">Включение записи в связь
<li><p class="q">Исключение записи из связи
<li><p class="q">Изменение связей
</ul>
<p class="p"><i><u><b>Достоинством</b></u></i> сетевой модели данных является возможность эффективной реализации по показателям затрат памяти и оперативности. В сравнении с иерархической моделью сетевая модель предоставляет большие возможности в смысле допустимости образования произвольных связей.
<p class="p"><i><u><b>Недостатком </b></u></i>сетевой модели данных является высокая сложность и жесткость схемы БД, построенной на ее основе, а также сложность для понимания и выполнения обработки информации в БД обычным пользователем. Кроме того в сетевой модели данных ослаблен контроль целостности связей вследстви6е допустимости установления произвольных связей между записями.
<p class="p">Системы на основе сетевой модели не получили широкого распространения на практике. 
<p class="p"><i>Наиболее известными сетевыми СУБД являются  следующие:</i> IDMS, db_VistaIII, СЕТЬ, СЕТОР и КОМПАС.

<p class="p"><h3><b>Реляционная модель </b></h3>
<p class="p">Реляционная модель данных предложена сотрудниками фирмы IBM Эдгаром Коддом и основывается на понятии отношение (relation).
<p class="p">Отношение представляет собой множество элементов, называемых кортежами. Наглядной формой представления отношения является привычная для человеческого восприятия двумерная таблица. Таблица имеет строки (записи), столбцы (колонки). Каждая строка имеет одинаковую структуру и состоит из полей. Строкам таблицы соответствуют кортежи, а столбцам – атрибуты отношения. Физически размещение данных в реляционных базах на внешних носителях легко осуществляется с помощью обычных файлов.
<p class="p">Реляционные таблицы могут быть связаны друг с другом, следовательно, данные могут извлекаться одновременно из нескольких таблиц. Таблицы связываются между собой для того, чтобы в конечном счете уменьшить объем БД. Связь каждой пары таблиц обеспечивается при наличии в них одинаковых столбцов.
<p class="p">Существуют следующие типы информационных связей:
<ul>
<li><p class="q">один-к-одному;
<li><p class="q">один-ко-многим;
<li><p class="q">многие-ко-многим.
</ul>
<p class="p"><i>Связь один-к-одному</i> предполагает, что одной записи первой таблицы соответствует только одна запись второй таблицы и наоборот.
Пример: Таблица «сотрудники» и таблица «паспортные данные».
<p class="p"><i>Связь один-ко-многим</i> предполагает, что одному атрибуту первой таблицы соответствует несколько атрибутов второй таблицы.
Пример: Таблица «сотрудники» и таблица «дети сотрудников».
<p class="p"><i>Связь многие-ко-многим</i> предполагает, что одному атрибуту первой таблицы соответствует несколько атрибутов второй таблицы и наоборот.
<p class="p">Пример: Таблица «предметы» и таблица «преподаватели».
<p class="p">Физически такую связь спроектировать сложно, поэтому она разбивается на две связи один-ко-многим, путем ввода дополнительной таблицы.
<p class="p">Пример: таблица «Преподаваемые предметы»
<p class="p"><i><u><b>Достоинством</b></u></i> реляционной модели данных заключается в простоте, понятности и удобстве физической реализации на ЭВМ. Именно простота и понятность для пользователя явились основной причиной их широкого использования.
<p class="p">Основными <i><u><b>недостатками</b></u></i> реляционной модели являются следующие: отсутствие стандартных средств идентификации отдельных записей и сложность описания иерархических и сетевых связей.
<p class="p"><i>Примеры реляционных СУБД:</i> DB2, R:BASE, FoxPro, Paradox, Visual FoxPro, Access, Oracle, ПАЛЬМА, МИФИ.

<p class="p"><h3><b>Постреляционная модель</b></h3>
<p class="p">Постреляционная модель данных представляет собой расширенную реляционную модель, снимающую ограничение неделимости данных, хранящихся в записях таблиц. Постреляционная модель данных допускает многозначные поля – поля, значения которых состоят из подзначений. Набор значений многозначных полей считается самостоятельной таблицей, встроенной в основную таблицу. По сравнению с реляционной моделью в постреляционной модели данные хранятся более эффективно, а при обработке не требуется выполнять операцию соединения данных из двух таблиц. На длину полей и количество полей в записях таблицы не накладывается требование постоянства. Это означает, что структура данных и таблиц имеет большую гибкость. Для описания функций контроля значений в полях имеется возможность создавать процедуры, автоматически вызываемые до или после обращений к данным. 
<p class="p"><i><u><b>Достоинством</b></u></i> данной модели является возможность представления совокупности связанных реляционных таблиц одной простреляционной таблицей. Это обеспечивает высокую наглядность представления информации и повышение эффективности ее обработки.
<p class="p"><i><u><b>Недостатком</b></u></i> постреляционной модели является сложность решения проблемы обеспечения целостности и непротиворечивости хранимых данных.
<p class="p"><i>К числу СУБД, основанных на постреляционной модели данных, относятся:</i> Bubba, Dasdb.

<p class="p"><h3><b>Многомерная модель</b></h3>
<p class="p">Многомерные СУБД являются узкоспециализированными СУБД, предназначенными для интерактивной аналитической обработки информации. Многомерность модели данных означает не многомерность визуализации цифровых данных, а многомерное логическое представление структуры информации при описании и в операциях манипулирования данными. По сравнению с реляционной моделью многомерная организация данных обладает более высокой наглядностью и информативностью.
<p class="p">Основным <i><u><b>достоинством</b></u></i> многомерной модели данных является удобство и эффективность аналитической обработки больших объемов данных, связанных со временем.
<p class="p"><i><u><b>Недостатком</b></u></i> многомерной модели данных является ее громоздкость для простейших задач обычной оперативной обработки информации.
 <p class="p"><center><img src="lectures/11.png" width="300" height="250" class="top_img"  /></center>
<p class="p"><i>Примеры:</i> Essbase, Media Multi-matrix, Oracle Express Server.
Для многомерной модели характерны следующие понятия:
<p class="p"><i><b>Измерение</b></i> - это множество типов данных образующих одну из граней куба.
<p class="p">Наиболее частым временем измерения являются: дни, месяцы, годы, в качестве географических измерений широко употребляются города, регионы, районы.
<p class="p"><i><b>Ячейка</b></i> – это поле значение которого однозначно определяется фиксированным набором измерений.
 
<p class="p"><h3><b>Объектно-ориентированная модель</b></h3>
<p class="p">В объектно-ориентированной модели при представлении данных имеется возможность идентифицировать отдельные записи базы. Между записями базы данных и функциями их обработки устанавливаются взаимосвязи с помощью механизмов, подобных соответствующим средствам в объектно-ориентированных языках программирования. Структура объектно-ориентированной БД графически представима в виде дерева, узлами которой являются объекты. Свойства объектов описываются некоторым стандартным типом или типом конструируемым пользователем (определяется как class). 
<p class="p">Значением свойства типа string является строка символов. Значение свойства типа class есть объект, являющийся экземпляром соответствующего класса. Каждый объект-экземпляр класса принадлежит своему классу и имеет одного родителя. Родовые отношения в БД образуют связную иерархию объектов.
<p class="p"> Пример  логической структуры объектно-ориентированной БД:

 <p class="p"><div class="iii"><center><img src="lectures/12.png" width="642" height="285" class="top_img"  /></center></div>


<p class="p">Для выполнения действий над данными в рассматриваемой модели БД применяются логические операции, усиленные объектно-ориентированными механизмами инкапсуляции, наследования и полиморфизма. Рассмотрим кратко понятия инкапсуляции, наследования и полиморфизма применительно к объектно-ориентированной модели БД.
<p class="p"><b>Инкапсуляция</b> ограничивает область видимости имени свойства пределами того объекта, в котором оно определено. Так, если в объект типа КАТАЛОГ добавить свойство, задающее телефон автора книги и имеющее название телефон, то мы получим одноименные свойства у объектов АБОНЕНТ и КАТАЛОГ. Смысл такого свойства будет определяться тем объектом, в который оно инкапсулировано.
<p class="p"><b>Наследование</b>, наоборот, распространяет область видимости свойства на всех потомков объекта. Так, всем объектам типа КНИГА, являющимся потомками объекта типа КАТАЛОГ, можно приписать свойства объекта-родителя: isbn, удк, название и автор. Если необходимо расширить действие механизма наследования на объекты, не являющиеся непосредственными родственниками (например, между двумя потомками одного родителя), то в их общем предке определяется абстрактное свойство типа аbs. Так, определение абсирактных свойств билет и номер в объекте БИБЛИОТЕКА приводит к наследованию этих свойств всеми дочерними объектами АБОНЕНТ, КНИГА и ВЫДЫЧА.
<p class="p"><b>Полиморфизм</b> в объектно-ориентированных языках программирования означает способность одного и того же программного кода работать в разнотипными данными. Другими словами, он означает допустимость в объектах разных типов иметь методы (процедуры или функции) с одинаковыми именами. Во время выполнения объектной программы одни и те же методы оперируют с разными объектами в зависимости от типа аргумента. Применительно к нашей объектно-ориентированной БД полиморфизм означает, что объекты класса КНИГА, имеющие разных родителей из класса КАТАЛОГ, могут иметь разный набор свойств. Следовательно, программы работы с объектами класса КНИГА могут содержать полиморфный код.
<p class="p">Основным <i><u><b>достоинством</b></u></i> объектно-ориентированной модели данных в сравнении с реляционной является возможность отображения информации о сложных взаимосвязях объектов. Объектно-ориентированная модель данных позволяет идентифицировать отдельную запись базы данных и определять функции их обработки.
<p class="p"><i><u><b>Недостатками</b></u></i> объектно-ориентированной модели являются высокая понятийная сложность, неудобство обработки данных и низкая скорость выполнения запросов.
 <p class="definition def"><b>Задание</b>: Какая модель данных представлена на изображении(одним словом)?<br>
  <img src="lectures/16.png" width="520" height="400" class="min_img"  />
  <br> <br> 
   <b> Ответ:  </b><input type="text" class="fil va" size="22" maxlength="50" name="" id="set" autocomplete="off" style="text-transform: lowercase"> 
</p>
<div class="navbt">
	<div class=" btn red d">
		<a  href="2_Typical_organization_of_a_modern_DBMS.php" >Предыдущая 
			<div class="btn__blobs">
		      <div></div>
		      <div></div>
		      <div></div>
    		</div>
  		</a>
  	</div>
  	
	<div class=" btn red d">
		<a href="4_General_concepts_of_the_relational_approach_to_database_organization.php">Следующая
			<div class="btn__blobs">
		      <div></div>
		      <div></div>
		      <div></div>
   			</div>
   		</a>
   	</div>
 </div>
</p>
</div>
</main>
<script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>
 
 <script src="https://snipp.ru/cdn/jquery/2.1.1/jquery.min.js"></script>
    <script src="https://snipp.ru/cdn/jqueryui/1.12.1/jquery-ui.min.js"></script>
    <script src="https://snipp.ru/cdn/fancybox/2.1.7/source/jquery.fancybox.pack.js"></script>
    <script src="js/registration.js"></script>
    <script src="js/user.js"></script>  
    <script src="js/topic.js"></script>
    