<meta name="viewport" content="width=device-width, initial-scale=1">

   <link rel="stylesheet" href="css/topic.css">

  <link rel="stylesheet" href="css/registration.css">
 <link href="https://fonts.googleapis.com/css?family=Roboto:400,700" rel="stylesheet">
 <link rel="shortcut icon" href="image/icon.png" type="image/x-icon"> 

   <title>Базисные средства манипулирования реляционными данными</title>


 	<header>
		<?php 
    include('nav.php');
    include('reg.php');
    include('cont.php');
    include('user.php');
    ?> 
	</header>
 	<main  class="m">
  <div  id="back" ><a href="topic.php" >     &lArr; Назад</a></div>

 <div class="page" id="page">
  <p class="p" ><b>РАЗДЕЛ 1. ОСНОВНЫЕ КОНЦЕПЦИИ ОРГАНИЗАЦИИ ДАННЫХ И РЕЛЯЦИОННАЯ МОДЕЛЬ ДАННЫХ</b>
  <p class="title">Тема 1.4 Базисные средства манипулирования реляционными данными</p>

<p class="p">В 1970-1971 годах Е.Ф.Кодд опубликовал две статьи, в которых ввел реляционную модель данных и реляционные языки обработки данных – реляционную алгебру и реляционное исчисление. Хотя реляционная модель сама по себе имела важное значение, именно реляционные языки оказались серьезным основанием для реляционной революции в базах данных.
<p class="p">В первой статье Кодд предложил реляционную мидель данных и реляционную алгебру. <b>Реляционная алгебра</b> – это <b>процедурный</b> язык обработки реляционных таблиц. Это означает, что в реляционной алгебре используется пошаговый подход к созданию реляционных таблиц, содержащих ответы на запросы. В последующих статьях Кодд ввел реляцион¬ное исчисление. <b>Реляционное исчисление</b> – <b>непроцедурный</b> язык. В реляционном исчислении запрос создается путем определения таблицы запроса за один шаг.
<p class="p">Кодд показал, что реляционная алгебра и реляционное исчисление логически эквивалентны, что чрезвычайно важно. Это означает, что любой запрос, который можно сформулировать при помощи логического исчисления, также можно сформулировать, пользуясь реляционной алгеброй, и наоборот. Этот факт позволил измерять логическую мощность языка запросов. Если, язык имеет как минимум те же возможности, что и реляционная алгебра, то он называется реляционно-полным. Это означает, что любой запрос, который можно сформулировать в реляционной алгебре, должен формулиро¬ваться в «реляционно-полном языке». Таким образом, при создании коммерческих реляционных языков можно тестировать их логические возможности путем сравнения с реляционной алгеброй или реляционным исчисле-нием. Если язык имеет меньшую логическую мощность, чем реляционная алгебра или исчисление, то наверняка существуют запросы, которые нельзя сформулировать с помощью этого языка.
<p class="p">Операции реляционной алгебры манипулируют реляционными таблицами, то есть эти операции используют одну или две из существующих таблиц для создания новой таблицы. Затем полученная новая таблица может использоваться в качестве входной для новой операции. Эта важная идея – создание новых таблиц на основе старых – делает возможным необозримое множество обработки данных. Она также чрезвычайно упрощает создание запросов, поскольку мы можем экспериментировать с частичными реше¬ниями, пока не найдем работающий способ решения.
<p class="p">Реляционная алгебра состоит из следующих девяти операций: <b>объединения, пересечения, разности, произведения, выбора, создания проекций, соединения, деления и присвоения</b>. Первые четыре операции взяты из математической теории множеств и практически совпадают с операциями теории множеств. Это разумно, поскольку реляционные таблицы являются множествами, так что вполне естественно, что к ним применимы операции над множествами. Следующие четыре относящиеся только к реляционной модели данных. Операция присвоение – стандартная операция компьютерного языка, дающая имя величине. В нашем случае производится присвоение имени новой таблице, созданной из существующих таблиц.
<p class="definition"><svg aria-hidden="true" focusable="false" data-prefix="fas" data-icon="info" class="svg-inline--fa fa-info fa-w-6 " role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 192 512"><path fill="currentColor" d="M20 424.229h20V279.771H20c-11.046 0-20-8.954-20-20V212c0-11.046 8.954-20 20-20h112c11.046 0 20 8.954 20 20v212.229h20c11.046 0 20 8.954 20 20V492c0 11.046-8.954 20-20 20H20c-11.046 0-20-8.954-20-20v-47.771c0-11.046 8.954-20 20-20zM96 0C56.235 0 24 32.235 24 72s32.235 72 72 72 72-32.235 72-72S135.764 0 96 0z"></path></svg><b>Объединение</b>. <i>Операция реляционной алгебры, создающая теоретико-множественное объединение двух объединительно-совместимых реляционных таблиц</i>. Объединительная совместимость требуется для того чтобы результатом выполнения операции объединения была реляционная: таблица. Операция <b>объединения</b> (U) позволяет нам комбинировать данные из двух таблиц <b>С:=А U В</b> </p>
<p class="definition"><svg aria-hidden="true" focusable="false" data-prefix="fas" data-icon="info" class="svg-inline--fa fa-info fa-w-6 " role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 192 512"><path fill="currentColor" d="M20 424.229h20V279.771H20c-11.046 0-20-8.954-20-20V212c0-11.046 8.954-20 20-20h112c11.046 0 20 8.954 20 20v212.229h20c11.046 0 20 8.954 20 20V492c0 11.046-8.954 20-20 20H20c-11.046 0-20-8.954-20-20v-47.771c0-11.046 8.954-20 20-20zM96 0C56.235 0 24 32.235 24 72s32.235 72 72 72 72-32.235 72-72S135.764 0 96 0z"></path></svg><b>Пересечение</b>. <i>Операция реляционной алгебры, создающая пересечение в теоретико-множественном смысле двух объединительно-совместимых реляционных таблиц</i>. Операция <b>пересечения (∩)</b> позволяет нам идентифицировать строки, общие для двух таблиц.
Результатом выполнения операции пересечения будет реляционная таблица, состоящая из всех строк, встречающихся в обеих исходных таблицах. То есть, если <b>С := А ∩ В</b>, то С состоит из тех строк, которые есть и в А, и в В. Как и ранее, А и В должны быть объединительно-совместимы.</p>
<p class="definition"><svg aria-hidden="true" focusable="false" data-prefix="fas" data-icon="info" class="svg-inline--fa fa-info fa-w-6 " role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 192 512"><path fill="currentColor" d="M20 424.229h20V279.771H20c-11.046 0-20-8.954-20-20V212c0-11.046 8.954-20 20-20h112c11.046 0 20 8.954 20 20v212.229h20c11.046 0 20 8.954 20 20V492c0 11.046-8.954 20-20 20H20c-11.046 0-20-8.954-20-20v-47.771c0-11.046 8.954-20 20-20zM96 0C56.235 0 24 32.235 24 72s32.235 72 72 72 72-32.235 72-72S135.764 0 96 0z"></path></svg><b>Разность</b>. <i> Операция реляционной алгебры, создающая теоретико-множественную разность двух объединительно-совместимых реляционных таблиц.</i> Операция разности (обозначаемая знаком минус) позволяет идентифицировать те строки, которые есть в одной таблице, но отсутствуют в другой. Разность двух реляционных таблиц определяется как таблица, состоящая из всех строк, входящих в первую таблицу, но не входящих во вторую. То есть, если
<b>С := А – В</b>, то строками С являются те строки, которые есть в А, но которые отсутствуют в В.</p>
<p class="p">Обратите внимание, что А – В не совпадает с В – А. Таким образом, порядок таблиц в операции разности очень важен. Отметим, что таблицы должны быть объединительно-совместимыми. Операцию разности можно также назвать операцией <b>вычитания</b>. <b>Вычитание</b> – <i>операция взятия разности в реляционной алгебре</i>.
<p class="definition"><svg aria-hidden="true" focusable="false" data-prefix="fas" data-icon="info" class="svg-inline--fa fa-info fa-w-6 " role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 192 512"><path fill="currentColor" d="M20 424.229h20V279.771H20c-11.046 0-20-8.954-20-20V212c0-11.046 8.954-20 20-20h112c11.046 0 20 8.954 20 20v212.229h20c11.046 0 20 8.954 20 20V492c0 11.046-8.954 20-20 20H20c-11.046 0-20-8.954-20-20v-47.771c0-11.046 8.954-20 20-20zM96 0C56.235 0 24 32.235 24 72s32.235 72 72 72 72-32.235 72-72S135.764 0 96 0z"></path></svg><b>Произведение</b>. <i> Операция реляционной алгебры, создающая декартово произведение двух реляционных таблиц</i>. Операция произведения, обозначаемая символом *, имеет большое значение в качестве составной части операции соединения, которая, вероятно, является наиболее важной операцией в реляционной алгебре. Она идентична математической операции взятия декартова произведения двух множеств.</p>
<p class="p">Произведение <b>С := А*В</b> создается путем:<ul>
<p class="q">1. Связывания, или соединения, атрибутов двух таблиц.
<p class="q">2. Присоединения к каждой строке таблицы А каждой строки таблицы В. Таким образом, атрибутами С будут все атрибуты А и В вместе взятые. Если таблицы А и В имеют по два атрибута каждая, то С будет иметь четыре атрибута. Строки С созданы соединением строк А и В; Каждая строка А связана с каждой строкой В. Если в В три строки, каждая строка А (2 строки) связывается с тремя строками В и повторяется в строках С три раза. Легко видеть, что число строк С всегда будет равно произведению числа строк А на число строк В. Операция произведения используется в языке запросов SQL, который является наиболее важным коммерческим реляционным языком.</ul>
<p class="definition"><svg aria-hidden="true" focusable="false" data-prefix="fas" data-icon="info" class="svg-inline--fa fa-info fa-w-6 " role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 192 512"><path fill="currentColor" d="M20 424.229h20V279.771H20c-11.046 0-20-8.954-20-20V212c0-11.046 8.954-20 20-20h112c11.046 0 20 8.954 20 20v212.229h20c11.046 0 20 8.954 20 20V492c0 11.046-8.954 20-20 20H20c-11.046 0-20-8.954-20-20v-47.771c0-11.046 8.954-20 20-20zM96 0C56.235 0 24 32.235 24 72s32.235 72 72 72 72-32.235 72-72S135.764 0 96 0z"></path></svg><b>Выборка</b>. <i>Операция реляционной алгебры, производящая отбор строк из таблицы на основании некоторого условия</i>. Операция выборки используется для создания реляционной таблицы из другой реляционной таблицы путем отбора только тех строк, которые удовлетворяют заданному условию. С := SELЕСТ (имя таблицы: условие выбора).</p>
<p class="p">Например SР_ТОКУО:= SELЕСТ (SALESPERSON: OFFICE = «Токио»)
<p class="p">Можно использовать операторы сравнения =, <, >, <=, >=. Для каждого из них есть соответствующий оператор, использующий булеву операцию «не». Можно использовать булевы операторы «и» и «или». «Не» также можно использовать в общем случае для отрицания всего условия.
<p class="definition"><svg aria-hidden="true" focusable="false" data-prefix="fas" data-icon="info" class="svg-inline--fa fa-info fa-w-6 " role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 192 512"><path fill="currentColor" d="M20 424.229h20V279.771H20c-11.046 0-20-8.954-20-20V212c0-11.046 8.954-20 20-20h112c11.046 0 20 8.954 20 20v212.229h20c11.046 0 20 8.954 20 20V492c0 11.046-8.954 20-20 20H20c-11.046 0-20-8.954-20-20v-47.771c0-11.046 8.954-20 20-20zM96 0C56.235 0 24 32.235 24 72s32.235 72 72 72 72-32.235 72-72S135.764 0 96 0z"></path></svg><b>Создание проекций</b>. Если операцию выборки можно представить себе как исключение ненужных строк, то операцию создания <b>проекций</b> можно представить как исключение ненужных столбцов. Полученная в результате операции создания проекций таблица называется <b>проекцией исходной таблицы</b>. Создание проекций – <i>операция реляционной алгебры, создающая новую таблицу путем исключения столбцов из существующей таблицы</i>.</p> В отличие от других операций реляционной алгебры, операция создания проекций не требует специального ключевого слова или символа. Для того чтобы создать проекцию, состоящую только из некоторых определенных столбцов другой реляционной таблицы необходимо указать исходную таблицу, а после нее в квадратных скобках перечисляем те столбцы, которые необходимо оставить. Например, С:=SР_ТОКУО [SALPERS_NAME]. Операция автоматически исключает повторы из результирующей таблицы. Это происходит и в том случае, когда результирующая таблица содержит более одного столбца.
<p class="definition"><svg aria-hidden="true" focusable="false" data-prefix="fas" data-icon="info" class="svg-inline--fa fa-info fa-w-6 " role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 192 512"><path fill="currentColor" d="M20 424.229h20V279.771H20c-11.046 0-20-8.954-20-20V212c0-11.046 8.954-20 20-20h112c11.046 0 20 8.954 20 20v212.229h20c11.046 0 20 8.954 20 20V492c0 11.046-8.954 20-20 20H20c-11.046 0-20-8.954-20-20v-47.771c0-11.046 8.954-20 20-20zM96 0C56.235 0 24 32.235 24 72s32.235 72 72 72 72-32.235 72-72S135.764 0 96 0z"></path></svg><b>Соединение</b>. <i>Операция реляционной алгебры связывающая таблицы</i>. Операция соединения используется для связывания данных между таб¬лицами. Это, возможно, наиболее важная функция любого языка баз данных. У нее есть несколько версий: естественное соединение, тета-соединение и внешнее соединение. Наиболее важным из них является естественное соединение.</p>
<p class="definition"><svg aria-hidden="true" focusable="false" data-prefix="fas" data-icon="info" class="svg-inline--fa fa-info fa-w-6 " role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 192 512"><path fill="currentColor" d="M20 424.229h20V279.771H20c-11.046 0-20-8.954-20-20V212c0-11.046 8.954-20 20-20h112c11.046 0 20 8.954 20 20v212.229h20c11.046 0 20 8.954 20 20V492c0 11.046-8.954 20-20 20H20c-11.046 0-20-8.954-20-20v-47.771c0-11.046 8.954-20 20-20zM96 0C56.235 0 24 32.235 24 72s32.235 72 72 72 72-32.235 72-72S135.764 0 96 0z"></path></svg><b>Естественное соединение</b>. <i> Операция соединения, связывающая таблицы, когда общие столбцы имеют равные значения.</i> Операция естественного соединения записывается следующим образом:<b> Д:=JOIN (А,В)</b>.</p>
<p class="p">Общее определение естественного соединения: Предположим, что необходимо взять естественное соединение двух таблиц А и В, имеющих общие строки С1,...,Сп. Тогда операция JOIN (А, В) выполняется за следую¬щие три шага:
<p class="q">1. Берется произведение таблиц А и В. В результате получается таблица, содержащая по два столбца на каждый С1,...,Сп.
<p class="q">2. Из таблицы произведения исключаются все строки кроме тех, в которых значения столбцов С1,..,Сп из таблицы А равны соответственно, значе¬ниям этих столбцов в В.
<p class="q">3. Проектированием исключается одна копия столбцов С1.....Сп.
<p class="p">Как показывает общее определение, если две реляционные таблицы имеют более одного общего столбца, то соединение производится на основании равенства значений во всех общих столбцах. Если таблица А имеет k столбцов, а таблица В имеет m столбцов, то естественное соединение таблиц А и В будет состоять из (k+m-n) столбцов, где n – число общих столбцов таблиц А и В.
<p class="definition"><svg aria-hidden="true" focusable="false" data-prefix="fas" data-icon="info" class="svg-inline--fa fa-info fa-w-6 " role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 192 512"><path fill="currentColor" d="M20 424.229h20V279.771H20c-11.046 0-20-8.954-20-20V212c0-11.046 8.954-20 20-20h112c11.046 0 20 8.954 20 20v212.229h20c11.046 0 20 8.954 20 20V492c0 11.046-8.954 20-20 20H20c-11.046 0-20-8.954-20-20v-47.771c0-11.046 8.954-20 20-20zM96 0C56.235 0 24 32.235 24 72s32.235 72 72 72 72-32.235 72-72S135.764 0 96 0z"></path></svg><b>Тета-соединение</b> – это соединение с определенным условием, в котором участвуют столбцы из каждой таблицы. Это условие означает, что два столбца будут определенным образом сравниваться. Оператор сравнения мо¬жет быть любой из шести следующих: =, не =, <,>, <=, >=</p>
<p class="definition"><svg aria-hidden="true" focusable="false" data-prefix="fas" data-icon="info" class="svg-inline--fa fa-info fa-w-6 " role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 192 512"><path fill="currentColor" d="M20 424.229h20V279.771H20c-11.046 0-20-8.954-20-20V212c0-11.046 8.954-20 20-20h112c11.046 0 20 8.954 20 20v212.229h20c11.046 0 20 8.954 20 20V492c0 11.046-8.954 20-20 20H20c-11.046 0-20-8.954-20-20v-47.771c0-11.046 8.954-20 20-20zM96 0C56.235 0 24 32.235 24 72s32.235 72 72 72 72-32.235 72-72S135.764 0 96 0z"></path></svg><b>Тета-соединение</b>. <i> Операция соединения, связывающая таблицы, когда значения из определенных столбцов находятся в определенном отношении</i>.</p>
<p class="p">Общий вид тета-соединения таков:<b>С:=JOIN (а, В: X δ У),</b>
<p class="q">где А и В – соединяемые таблицы, X и У – столбцы из этих двух таб¬лиц, а греческая буква δ обозначает один из шести операторов, перечисленных выше.
<p class="p">Наш пример иллюстрирует тета-соединение в случае, когда оператор сравнения «=». Такое соединение также называется эквисоединением. В некоторых задачах требуются другие операторы.
<p class="definition"><svg aria-hidden="true" focusable="false" data-prefix="fas" data-icon="info" class="svg-inline--fa fa-info fa-w-6 " role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 192 512"><path fill="currentColor" d="M20 424.229h20V279.771H20c-11.046 0-20-8.954-20-20V212c0-11.046 8.954-20 20-20h112c11.046 0 20 8.954 20 20v212.229h20c11.046 0 20 8.954 20 20V492c0 11.046-8.954 20-20 20H20c-11.046 0-20-8.954-20-20v-47.771c0-11.046 8.954-20 20-20zM96 0C56.235 0 24 32.235 24 72s32.235 72 72 72 72-32.235 72-72S135.764 0 96 0z"></path></svg><b>Эквисоединение</b>. <i>Тета-соединение, основанное на равенстве определенных столбцов.</i>
<p class="p">Тета-соединение, в отличие от естественного соединения, не включает удаление одного или более столбцов на последнем шаге. Другими словами, если таблица А содержит k столбцов, а таблица В – m столбцов, то тета-соединение А и В будет состоять из k+m столбцов.
<p class="definition"><svg aria-hidden="true" focusable="false" data-prefix="fas" data-icon="info" class="svg-inline--fa fa-info fa-w-6 " role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 192 512"><path fill="currentColor" d="M20 424.229h20V279.771H20c-11.046 0-20-8.954-20-20V212c0-11.046 8.954-20 20-20h112c11.046 0 20 8.954 20 20v212.229h20c11.046 0 20 8.954 20 20V492c0 11.046-8.954 20-20 20H20c-11.046 0-20-8.954-20-20v-47.771c0-11.046 8.954-20 20-20zM96 0C56.235 0 24 32.235 24 72s32.235 72 72 72 72-32.235 72-72S135.764 0 96 0z"></path></svg><b>Деление</b>. <i> Операция реляционной алгебры, создающая новую таблицу путем выбора строк одной таблицы, соответствующих каждой строке другой таблицы.</i>
<p class="p">Общее описание операции следующим обра¬зом. Допустим, что А, В – реляционные таблицы, тогда <b>С := А/В</b>
<p class="q">1. Столбцы В должны составлять подмножество множества столбцов А. Столбцами С будут только те столбцы А, которые не являются столбцами В.
<p class="q">2. Строка помещается в таблицу С в том и только том случае, если она входит в А с каждой строкой В.
<p class="p">Операция деления является обратной к операции произведения. Легко проверить, что если таблица является произведением двух таблиц В и С, то мы можем получить таблицу В, разделив произведение на С. То есть <b>(В * С) /C = В</b>.
<p class="p">Это объясняет, по аналогии с обычной арифметикой, почему операция деления так называется. Кодд включил ее в реляционную алгебру, чтобы обеспечить возможности, аналогичные квантору всеобщности реляционного исчисления. Операция деления нужна, для того чтобы мы могли выполнять запросы, содержащие в условии слова «все» или «каждый».
<p class="p"><b>Присвоение</b>. Операция реляционной алгебры, дающая имя таблице.



<div class="navbt">
	<div class=" btn red d">
		<a  href="4_General_concepts_of_the_relational_approach_to_database_organization.php" >Предыдущая 
			<div class="btn__blobs">
		      <div></div>
		      <div></div>
		      <div></div>
    		</div>
  		</a>
  	</div>
	<div class=" btn red d">
		<a href="6_Designing_relational_databases_using_normalization.php">Следующая
			<div class="btn__blobs">
		      <div></div>
		      <div></div>
		      <div></div>
   			</div>
   		</a>
   	</div>
 </div>
</p>
</div>
</main>
 <script src="https://snipp.ru/cdn/jquery/2.1.1/jquery.min.js"></script>
    <script src="https://snipp.ru/cdn/jqueryui/1.12.1/jquery-ui.min.js"></script>
    <script src="https://snipp.ru/cdn/fancybox/2.1.7/source/jquery.fancybox.pack.js"></script>
    <script src="js/registration.js"></script>
    <script src="js/user.js"></script>  
    <script src="js/topic.js"></script>
    