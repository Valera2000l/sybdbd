<meta name="viewport" content="width=device-width, initial-scale=1">

   <link rel="stylesheet" href="css/topic.css">

  <link rel="stylesheet" href="css/registration.css">
 <link href="https://fonts.googleapis.com/css?family=Roboto:400,700" rel="stylesheet">
 <link rel="shortcut icon" href="image/icon.png" type="image/x-icon"> 

   <title>Общие понятия реляционного подхода к организации баз данных. Основные концепции и термины</title>


 	<header>
		<?php 
    include('nav.php');
    include('reg.php');
    include('cont.php');
    include('user.php');
    ?> 
	</header>
 	<main  class="m">
  <div  id="back" ><a href="topic.php" >     &lArr; Назад</a></div>

 <div class="page" id="page">
  <p class="p" ><b>РАЗДЕЛ 1. ОСНОВНЫЕ КОНЦЕПЦИИ ОРГАНИЗАЦИИ ДАННЫХ И РЕЛЯЦИОННАЯ МОДЕЛЬ ДАННЫХ </b>

<p class="title">Тема 1.3 Общие понятия реляционного подхода к организации баз данных. Основные концепции и термины

 <p class="p" >Реляционная модель была разработана в конце 1960-х годов Е.Ф.Коддом (сотрудник IBM) и опубликованы в 1970 г. Она определяет способ представления данных (структуру данных), методы защиты данных (целостность данных), и операции, которые можно выполнять с данными (манипулирование данными).
 <p class="p" >Реляционная модель - не единственная, которую можно использовать при работе с данными. Существуют также иерархическая модель, сетевая модель, звездообразная модель и т.п. Однако реляционная модель оказалась наиболее удобной и поэтому используется сейчас наиболее широко.
 <p class="p" >Основные принципы реляционных <a href="glossary.php#bd" class="gl" title="Узнать значение" >баз данных</a> можно сформулировать так:
<ul>
<li><p class="q">все данные на концептуальном уровне представляются в виде упорядоченной организации, определенной в виде строк и столбцов и называемой отношением (relation). Более распространенный синоним слова "отношение" - таблица (или "набор записей", или набор результатов - result set. Именно от этого и происходит термин "реляционные базы данных", а вовсе не от отношений между таблицами;
<li><p class="q">все значения являются скалярами. Это значит, что для любой строки и столбца любого отношения существует одно и только одно значение;
<li><p class="q">все операции выполняются над целым отношением и результатом этих операций также является целое отношение. Этот принцип называется замыканием. Поэтому результаты одной операции (например, запроса), можно использовать в качестве исходных данных для выполнения другой операции (подзапроса).
</ul>

 <p class="p" >Теперь - про формальную терминологию:
<p class="q"><b>	отношение (relation)</b> - это вся структура целиком, набор записей (в обычном понимании - таблица).
<p class="q"><b>	кортеж </b>- это каждая строка, содержащая данные. Более распространенный, но менее формальный термин - запись.
<p class="q"><b>мощность</b> - число кортежей в отношении (проще говоря, число записей);
<p class="q"><b>атрибут </b>- это столбец в отношении;
<p class="q"><b>	размерность</b> - это число атрибутов в отношении (в данном случае - 3);
<p class="p" >Каждое отношение можно разделить на две части - <b>заголовок</b> и <b>тело</b>. На простом языке заголовок отношения - это список столбцов, а тело - это сами записи (кортежи).
<p class="p" >В нашем примере название каждого столбца (атрибута) состоит из двух слов, разделенных двоеточием. Согласно формальным определениям, первая часть - это <b>имя атрибута</b> (название столбца), а вторая часть - это <b>домен</b> (вид данных, которые представляет данных столбец). Понятия "домен" и "тип данных" не эквиваленты друг другу. На практике домен обычно опускается.
<p class="p" >Тело отношения состоит из неупорядоченного набора кортежей (его число может быть любым - от 0 до бесконечно большого).
<p class="p"><center><img src="lectures/6.gif" width="363" height="320" class="top_img"  /></center>
<p class="p" ><b><i><center>	Сущности</center></i></b>

<p class="definition"><svg aria-hidden="true" focusable="false" data-prefix="fas" data-icon="info" class="svg-inline--fa fa-info fa-w-6 " role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 192 512"><path fill="currentColor" d="M20 424.229h20V279.771H20c-11.046 0-20-8.954-20-20V212c0-11.046 8.954-20 20-20h112c11.046 0 20 8.954 20 20v212.229h20c11.046 0 20 8.954 20 20V492c0 11.046-8.954 20-20 20H20c-11.046 0-20-8.954-20-20v-47.771c0-11.046 8.954-20 20-20zM96 0C56.235 0 24 32.235 24 72s32.235 72 72 72 72-32.235 72-72S135.764 0 96 0z"></path></svg><b><u>Сущность </u></b>- это что-то такое, о чем нужно хранить информацию в базе данных.
<p class="p" >При проектировании баз данных достаточно описать происходящую ситуацию - и большинство существительных и часть глаголов будут кандидатами на сущности. 
<p class="p" ><u>Например</u>: "Покупатели покупают товары. Сотрудники продают товары покупателям. Поставщики поставляют товары"  - покупатели, товары, сотрудники и поставщики - это сущности. Глаголы "покупать" и "продавать" - тоже сущности (хотя могут быть и одной сущностью, разной с точки зрения покупателя и продавца).
<p class="p" >При проектировании БД главный источник информации о сущностях - это беседа с заказчиком в целях уяснения его бизнес-процессов. Кроме того, анализируются стандартные документы, используемые в бизнес-процессах: бланки, отчеты, инструкции и т.п. После получения такого списка необходимо проверить его на полноту и связность, а также выявить дубли - одинаковые сущности, которые называются разными словами, и сущности, которые на самом деле отличаются, но описываются один и ем же термином.
<p class="p" >Сущности могут моделировать конкретные понятия (клиенты, товары, звонки) и абстрактные (агент отвечает за клиента, студент записан на курс).
<p class="p" >Любая таблица имеет один или несколько столбцов, значения в которых однозначно идентифицируют каждую ее строку. Такой столбец (или комбинация столбцов) называется <i>первичным ключом (primary key)</i>. Часто вводят искусственное поле, предназначенное для нумерации записей в таблице. Таким полем, например, может быть его порядковый, который сможет обеспечить уникальность каждой записи в таблице. Ключ должен обладать следующими свойствами.
<p class="p" >Взаимосвязь таблиц является важнейшим элементом реляционной модели данных. Она поддерживается <i>внешними ключами (foreign key)</i>.
<p class="p" ><b><i><center>Атрибуты сущностей в базах данных, определение атрибута, выбор набора атрибутов.</center></i></b>

<p class="p" >Записи об определенных параметрах каждой из сущностей называются <b>атрибутами</b>. Например, для сущности "заказчик", видимо, будет храниться информация об его наименовании, представителях, адресе и т.п.
<p class="p" >Выбор нужного комплекта атрибутов - одна из самых больших проблем при проектировании баз данных. Очень часто в реальной базе данных нужный комплект атрибутов в итоге не хранится - просто по той причине, что пользователи не смогли сообщить в процессе сбора информации, что он действительно нужен. Иногда в базе, наоборот, попадают лишние атрибуты, заполнение которых требует дополнительного времени. Очень часто возникает проблема с форматом вводимых данных, например, на какие части делить адрес и что делать с нестандартными случаями.
<p class="p" >Общее правило при выборе набора атрибутов: нужно начинать с результата и стараться упрощать модель, а не усложнять ее. Первое, на что нужно ответить - на какие вопросы пользователей должны отвечать ваша база данных?
<p class="p" >Далее - обеспечиваем системе гибкость. Потребности пользователей могут изменяться, им потребуется дополнительная функциональность, возникнут исключения и т.п. Обычно достижение большей гибкости производится за счет усложнения базы данных (и системы ввода информации), но чем более сложна система, тем тяжелее с ней работать пользователям.
<p class="p" ><b><i><center>Домены (domains) в реляционных моделях данных, определение домена, домены и типы данных, доменная целостность данных</center></i></b>

<p class="definition"><svg aria-hidden="true" focusable="false" data-prefix="fas" data-icon="info" class="svg-inline--fa fa-info fa-w-6 " role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 192 512"><path fill="currentColor" d="M20 424.229h20V279.771H20c-11.046 0-20-8.954-20-20V212c0-11.046 8.954-20 20-20h112c11.046 0 20 8.954 20 20v212.229h20c11.046 0 20 8.954 20 20V492c0 11.046-8.954 20-20 20H20c-11.046 0-20-8.954-20-20v-47.771c0-11.046 8.954-20 20-20zM96 0C56.235 0 24 32.235 24 72s32.235 72 72 72 72-32.235 72-72S135.764 0 96 0z"></path></svg><b><u>Домен</u></b> - это "вид" данных, которые может содержать данный атрибут. <b>Более четкое определение</b> -  это набор всех допустимых значений, которые может содержать данный атрибут.
<p class="p" >Понятие "домен" не следует путать с понятием "тип данных". Тип данных - это физическое понятие (которое реализовано средствами конкретной СУБД), а домен - логическое понятие. 
<p class="p" >Например, для пола обычно используется текстовое поле длиной 1 символ или 3 символа (на уровне типа данных), в то же время на уровне домена - это только два возможных значения.
<p class="p" >Непосредственно в СУБД механизмов, которые бы представляли домен, нет. Обычно понятие домена используется для обеспечения так называемой доменной целостности данных, например, когда введенное пользователем значений проверяется на соответствий указанному набору значений.
<p class="p" ><b><i><center>Связи (отношения) между сущностями в реляционных моделях данных</i></b>

 <p class="p" >Реляционные таблицы могут быть связаны друг с другом, следовательно, данные могут извлекаться одновременно из нескольких таблиц. Таблицы связываются между собой для того, чтобы в конечном счете уменьшить объем БД. Связь каждой пары таблиц обеспечивается при наличии в них одинаковых столбцов.
<p class="p" >Существуют следующие типы информационных связей:
<ul>
<li><p class="q">один-к-одному;
<li><p class="q">один-ко-многим;
<li><p class="q">многие-ко-многим.
</ul>
<p class="p" ><i><b>Связь один-к-одному</b></i> предполагает, что одной записи первой таблицы соответствует только одна запись второй таблицы и наоборот.
<p class="p" >Пример: Таблица «сотрудники» и таблица «паспортные данные».
<p class="p" ><i><b>Связь один-ко-многим</b> </i>предполагает, что одному атрибуту первой таблицы соответствует несколько атрибутов второй таблицы.
<p class="p" >Пример: Таблица «сотрудники» и таблица «дети сотрудников».
<p class="p" ><i><b>Связь многие-ко-многим</b></i> предполагает, что одному атрибуту первой таблицы соответствует несколько атрибутов второй таблицы и наоборот.
<p class="p" >Пример: Таблица «предметы» и таблица «преподаватели».
<p class="p" >Физически такую связь спроектировать сложно, поэтому она разбивается на две связи один-ко-многим, путем ввода дополнительной таблицы.
<p class="p" >Пример: таблица «Преподаваемые предметы»
<p class="p" ><b><i><center>Требования к проектированию реляционной базы данных в общем виде можно свести к нескольким правилам.</center></i></b>
<ul>
<li><p class="q">Каждая таблица имеет уникальное в базе данных имя и состоит из однотипных строк.
<li><p class="q">Каждая таблица состоит из фиксированного числа столбцов и значений. В одном столбце строки не может быть сохранено более одного значения. Например, если есть таблица с информацией об авторе, дате издания, тираже и т. д., то в столбце с именем автора не может храниться более одной фамилии. Если книга написана двумя и более авторами, придется использовать дополнительные таблицы.
<li><p class="q">Ни в какой момент времени в таблице не найдется двух строк, дублирующих друг друга. Строки должны отличаться хотя бы одним значением, чтобы была возможность однозначно идентифицировать любую строку таблицы.
<li><p class="q">Каждому столбцу присваивается уникальное в пределах таблицы имя; для него устанавливается конкретный тип данных, чтобы в этом столбце размещались однородные значения (даты, фамилии, телефоны, денежные суммы и т. д.).
<li><p class="q">Полное информационное содержание базы данных представляется в виде яв¬ных значений самих данных, и такой метод представления является единствен¬ным. Например, связь между таблицами осуществляется на основе хранимых в соответствующих столбцах данных, а не на основе каких-либо указателей, искусственно определяющих связи.
<li><p class="q">При обработке данных можно свободно обращаться к любой строке или любому столбцу таблицы. Значения, хранимые в таблице, не накладывают никаких ограничений на очередность обращения к данным. 
</ul>

<p class="p" >
<!-- Online Test Pad Crossword Widget (#44498)-->
<div id="otp_wgt_cd6ufmwkkgi5q"></div>
<script type="text/javascript">
    var otp_wjs_dt = (new Date).getTime();
    (function (w, d, n, s, rp) {
        w[n] = w[n] || [];
        rp = {};
        w[n].push(function () {
            otp_render_widget(d.getElementById("otp_wgt_cd6ufmwkkgi5q"), 'onlinetestpad.com', 'cd6ufmwkkgi5q', rp);
        }); 
        s = d.createElement("script");
        s.type = "text/javascript";
        s.src = "//onlinetestpad.com/js/widget.js?" + otp_wjs_dt;
        s.async = true;
        d.getElementsByTagName("head")[0].appendChild(s);
    })(this, this.document, "otp_widget_callbacks");
</script>
<div class="navbt">
	<div class=" btn red d">
		<a  href="3_Early_approaches_to_DBMS_organization.php" >Предыдущая 
			<div class="btn__blobs">
		      <div></div>
		      <div></div>
		      <div></div>
    		</div>
  		</a>
  	</div>
  	
	<div class=" btn red d">
		<a href="5_Basic_tools_for_manipulating_relational_data.php">Следующая
			<div class="btn__blobs">
		      <div></div>
		      <div></div>
		      <div></div>
   			</div>
   		</a>
   	</div>
 </div>
</p>
</div>
</main>
 <script src="https://snipp.ru/cdn/jquery/2.1.1/jquery.min.js"></script>
    <script src="https://snipp.ru/cdn/jqueryui/1.12.1/jquery-ui.min.js"></script>
    <script src="https://snipp.ru/cdn/fancybox/2.1.7/source/jquery.fancybox.pack.js"></script>
    <script src="js/registration.js"></script>
    <script src="js/user.js"></script>  
    <script src="js/topic.js"></script>
    