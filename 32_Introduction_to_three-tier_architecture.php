<meta name="viewport" content="width=device-width, initial-scale=1">

   <link rel="stylesheet" href="css/topic.css">

  <link rel="stylesheet" href="css/registration.css">
 <link href="https://fonts.googleapis.com/css?family=Roboto:400,700" rel="stylesheet">
 <link rel="shortcut icon" href="image/icon.png" type="image/x-icon"> 

   <title>Введение в трехзвенную архитектуру</title>


 	<header>
		<?php 
    include('nav.php');
    include('reg.php');
    include('cont.php');
    include('user.php');
    ?> 
	</header>
 	<main  class="m">
  <div  id="back" ><a href="topic.php" >     &lArr; Назад</a></div>

 <div class="page" id="page">
  <p class="p" ><b>РАЗДЕЛ 7. ТРЕХЗВЕННАЯ АРХИТЕКТУРА  </b>

<p class="title">Тема 7.1 Введение в трехзвенную архитектуру


<p class="p"><b>Трехзвенная</b> (в некоторых случаях <i>многозвенная</i> ) <b>архитектура</b> (N-tier или multi-tier). представляет собой дальнейшее совершенствование технологии <i>" клиент – сервер "</i>. Рассмотрев архитектуру <i>" клиент – сервер "</i>, можно заключить, что она является 2-звенной: первое звено – клиентское <i>приложение</i>, второе звено – <i>сервер БД</i> + сама <i>БД</i>. В <i>трехзвенной</i> архитектуре вся бизнес-логика (деловая логика), ранее входившая в клиентские приложения, выделяется в отдельное звено, называемое сервером приложений. При этом клиентским приложениям остается лишь пользовательский <i>интерфейс</i>. Так, в качестве клиентского приложения в описанном выше примере выступает Web-браузер.
<p class="p">Что улучшается при использовании <i>трехзвенной архитектуры</i>? Теперь при изменении бизнес-логики более нет необходимости изменять клиентские приложения и обновлять их у всех пользователей. Кроме того, максимально снижаются требования к аппаратуре пользователей.
<p class="p">Итак, в результате работа построена следующим образом:

<ul>
  <li> <p class="q"><a href="glossary.php#bd" class="gl" title="Узнать значение"> База данных</a> в виде набора файлов находится на жестком диске специально выделенного компьютера (сервера сети).
  <li> <p class="q"><a href="glossary.php#sybd" class="gl" title="Узнать значение">СУБД</a> располагается также на сервере сети.
  <li> <p class="q">Существует специально выделенный сервер приложений, на котором располагается программное обеспечение (ПО) делового анализа (бизнес-логика).
  <li> <p class="q">Существует множество клиентских компьютеров, на каждом из которых установлен так называемый "тонкий клиент" – клиентское приложение, реализующее интерфейс пользователя.
  <li> <p class="q">На каждом из клиентских компьютеров пользователи имеют возможность запустить приложение – тонкий клиент. Используя предоставляемый приложением пользовательский интерфейс, он инициирует обращение к ПО делового анализа, расположенному на сервере приложений.
  <li> <p class="q">Сервер приложений анализирует требования пользователя и формирует запросы к БД. Для общения используется специальный язык запросов SQL, т.е. по сети от сервера приложений к серверу БД передается лишь текст запроса.
  <li> <p class="q">СУБД инкапсулирует внутри себя все сведения о физической структуре БД, расположенной на сервере.
  <li> <p class="q">СУБД инициирует обращения к данным, находящимся на сервере, в результате которых результат выполнения запроса копируется на сервер приложений.
  <li> <p class="q"> Сервер приложений возвращает результат в клиентское приложение (пользователю).
  <li> <p class="q"> Приложение, используя пользовательский интерфейс, отображает результат выполнения запросов.
  </ul>
<p class="p"> В компьютерных технологиях трёхзвенная архитектура редполагает наличие следующих компонентов приложения: клиентское приложение (обычно говорят «тонкий клиент» или терминал), подключенное к серверу приложений, который в свою очередь подключен к серверу базы данных.

<p class="p"><b> Обзор архитектуры</b>

<p class="p"><b>Клиент</b> — это интерфейсный (обычно графический) компонент, который представляет <i>первый уровень</i>, собственно приложение для конечного пользователя. Первый уровень не должен иметь прямых связей с базой данных (по требованиям безопасности), быть нагруженным основной бизнес-логикой (по требованиям масштабируемости) и хранить состояние приложения (по требованиям надежности). На первый уровень может быть вынесена и обычно выносится простейшая бизнес-логика: интерфейс авторизации, алгоритмы шифрования, проверка вводимых значений на допустимость и соответствие формату, несложные операции (сортировка, группировка, подсчет значений) с данными, уже загруженными на терминал.

<p class="p"><b>Сервер приложений</b> располагается на <i>втором уровне</i>. На втором уровне сосредоточена бо́льшая часть бизнес-логики. Вне его остаются фрагменты, экспортируемые на терминалы (см.выше), а также погруженные в третий уровень хранимые процедуры и триггеры.

<p class="p"><b>Сервер базы данных</b> обеспечивает хранение данных и выносится на <i>третий уровень</i>. Обычно это стандартная реляционная или объектно-ориентированная СУБД. Если третий уровень представляет собой базу данных вместе с хранимыми процедурами, триггерами и схемой, описывающей приложение в терминах реляционной модели, то второй уровень строится как программный интерфейс, связывающий клиентские компоненты с прикладной логикой базы данных.
<p class="p">В простейшей конфигурации физически сервер приложений может быть совмещён с сервером базы данных на одном компьютере, к которому по сети подключается один или несколько терминалов.
<p class="p">В «правильной» (с точки зрения безопасности, надёжности, масштабирования) конфигурации сервер базы данных находится на выделенном компьютере (или кластере), к которому по сети подключены один или несколько серверов приложений, к которым, в свою очередь, по сети подключаются терминалы.
<p class="p"><b>Достоинства</b>
<p class="p">По сравнению с клиент-серверной или файл-серверной архитектурой можно выделить следующие достоинства трёхуровневой архитектуры:
  <ul>
<li> <p class="q">масштабируемость
<li> <p class="q">конфигурируемость — изолированность уровней друг от друга позволяет (при правильном развертывании архитектуры) быстро и простыми средствами переконфигурировать систему при возникновении сбоев или при плановом обслуживании на одном из уровней
<li> <p class="q">высокая безопасность
<li> <p class="q">высокая надёжность
<li> <p class="q">низкие требования к скорости канала (сети) между терминалами и сервером приложений
<li> <p class="q">низкие требования к производительности и техническим характеристикам терминалов, как следствие снижение их стоимости. Терминалом может выступать не только компьютер, но и, например, мобильный телефон.
</ul>
<p class="p"><b>Недостатки</b>
<p class="p">Недостатки вытекают из достоинств. По сравнению c клиент-серверной или файл-серверной архитектурой можно выделить следующие <b>недостатки</b> трёхуровневой архитектуры:
<ul>
<li> <p class="q"> более высокая сложность создания приложений;
<li> <p class="q"> сложнее в разворачивании и администрировании;
<li> <p class="q">высокие требования к производительности серверов приложений и сервера базы данных, а, значит, и высокая стоимость серверного оборудования;
<li> <p class="q"> высокие требования к скорости канала (сети) между сервером базы данных и серверами приложений.
</ul>
<p class="p">Компоненты трёхзвенной архитектуры, с точки зрения программного обеспечения реализуют определенные сервера БД, web-сервера и браузеры. Место любого из этих компонентов может занять программное обеспечение любого производителя. Ниже представлено описание взаимодействия компонентов трехуровневой архитектуры клиент-серверного приложения. Сервер БД представлен MySQL-сервером; сервер приложений технологиями: ADO.NET, ASP.NET и web-сервером IIS; роль клиента выполняет любой web-браузер.

<p class="p">Браузер клиента 1-> Сервер IIS 2-> Исполняющая среда ASP.NET 2.0 3-> Провайдер данных ADO.NET 2.0 4-> Сервер MySQL 5-> Провайдер данных ADO.NET 2.0 6-> Исполняющая среда ASP.NET 2.0 7-> Сервер IIS 8-> Браузер клиент


<div class="navbt">
	<div class=" btn red d">
		<a  href="30_PHP_functions_for_working_with_dbms.php" >Предыдущая 
			<div class="btn__blobs">
		      <div></div>
		      <div></div>
		      <div></div>
    		</div>
  		</a>
  	</div>
  	


 </div>
</p>
</div>
</main>
 <script src="https://snipp.ru/cdn/jquery/2.1.1/jquery.min.js"></script>
    <script src="https://snipp.ru/cdn/jqueryui/1.12.1/jquery-ui.min.js"></script>
    <script src="https://snipp.ru/cdn/fancybox/2.1.7/source/jquery.fancybox.pack.js"></script>
    <script src="js/registration.js"></script>
    <script src="js/user.js"></script>  
    <script src="js/topic.js"></script>