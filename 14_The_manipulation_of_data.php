<meta name="viewport" content="width=device-width, initial-scale=1">

   <link rel="stylesheet" href="css/topic.css">

  <link rel="stylesheet" href="css/registration.css">
 <link href="https://fonts.googleapis.com/css?family=Roboto:400,700" rel="stylesheet">
 <link rel="shortcut icon" href="image/icon.png" type="image/x-icon"> 

   <title>Манипулирование данными</title>


 	<header>
		<?php 
    include('nav.php');
    include('reg.php');
    include('cont.php');
    include('user.php');
    ?> 
	</header>
 	<main  class="m">
  <div  id="back" ><a href="topic.php" >     &lArr; Назад</a></div>
 <div class="page" id="page">
  <p class="p" ><b>РАЗДЕЛ 3. ЭЛЕМЕНТЫ ЯЗЫКА SQL</b>
  <p class="title">Тема 3.4 Манипулирование данными</p>
<p class="p"><b><center>Обновление данных или команда UPDATE</center></b>
 <p class="p" >Назначение команды <b>UPDATE</b> – обновление существующих записей в указанной таблице. Указываем, где и чего хотим изменить, а после ключевого слова WHERE устанавливаем критерии отбора обновляемых записей. В команде обновления данных, как и в других SQL запросах, можно использовать подзапросы: например, можно определить в качестве присваиваемого полю значения результат подзапроса, который возвращает только одну колонку и одну строчку.
<p class="definition def"><b>UPDATE <таблица> SET {<поле> = <выражение>} [WHERE <список условий>]</b><br><br>
или<br><br>
<B>UPDATE <таблица> SET {<поле> = (SELECT <значение> FROM <откуда> WHERE <список условий>)} [WHERE <список условий>]</B></p>
<p class="p"><b><center>Добавление данных или команда INSERT</center></b>
<p class="p" >Добавление новых записей в указанную таблицу. Здесь тоже ничего сложного. Указываем таблицу, список полей и список добавляемых в эти поля значений. Что может дать использование SQL подзапроса тоже догадаться несложно - копирование выбранного с помощью SELECT массива данных в указанную таблицу (в перечисленные через запятую поля). Естественно, что количество и тип колонок в запросе SELECT должен соответствовать количеству и типу полей таблицы, куда производится вставка.
<p class="definition def"><b>INSERT INTO <таблица> [(<список полей>)] VALUES (<список значений>)
</b><br><br>
или<br><br>
<B>INSERT INTO <таблица> [(<список полей>)] (SELECT <список значений> FROM <откуда> WHERE <список условий>)</B></p>
<p class="p"><b><center>Удаление данных или команда DELETE</center></b>
<p class="p" >Удаление строк из одной таблицы или сразу из нескольких таблиц, строки которых объединены условиями. Здесь все также очевидно. Указываем, из какой таблицы удаляем данные, а в части WHERE отбираем удаляемые данные. Во втором варианте SQL запроса с использованием инструкции DELETE показан обобщенный синтаксис удаления записей сразу из нескольких таблиц. В условиях отбора (в части WHERE) также можно использовать подзапросы.
<p class="definition def"><b>DELETE FROM <таблица> [WHERE <список условий>]
</b><br><br>
или<br><br>
<B>DELETE <список таблиц> FROM <список источников> [WHERE <список условий>]</B></p>
<p class="p"><b><center>Оператор ввода данных INSERT</center></b>
<p class="p">Оператор ввода данных INSERT имеет следующий синтаксис:
<p class="definition def"><b>INSERT INTO имя таблицы  ([<список столбцов> ]) values (<список значений>) </B></p>
<p class="p">Подобный синтаксис позволяет ввести только одну строку в таблицу.
<p class="p">Например, введем нового студента в таблицу s2 БД Сессия:
<p class="definition def">INSERT INTO s2 ( ФИО, Группа) VALUES ('Сидоров П.П.', '02-КТ-21');</p>
<p class="p">Задание списка столбцов необязательно тогда, когда, как в данном случае, вводится строка с заданием значений всех столбцов. При таком вводе предполагается, что информация будет вводиться в том порядке, в котором они описаны в операторе CREATE TABLE. Так как в рассматриваемом примере вводится полная строка, то можно не задавать список столбцов, ограничиться только заданием перечня значений, в этом случае оператор ввода будет выглядеть следующим образом:
<p class="definition def">INSERT INTO S2
VALUES ('Сидоров П.П.', '02-КТ-21');</p>
<p class="p">Между списком имен столбцов и списком значений должно быть следующее соответствие:
<ul>
  <li> <p class="q"> количество элементов в обоих списках должно быть одинаковым;
  <li> <p class="q"> между положением элементов в списках должно быть строгое соответствие, которое определяется слева направо: первый элемент одного списка соответствует первому элементу второго списка и т. д.;
  <li> <p class="q">типы данных соответствующих элементов списков должны быть одинаковые и принадлежать к одному и тому же домену.
</ul>
<p class="p"><b><center>Оператор удаления данных DELETE</center></b>
<p class="p">Оператор удаления данных позволяет удалить одну или несколько строк из таблицы в соответствии с условиями, которые задаются для удаляемых строк.
<p class="p">Синтаксис оператора DELETE следующий:
<p class="definition def"><b>DELETE FROM имя_таблицы
[WHERE условия_Отбора]</B></p>
<p class="p">Условия отбора определяют, какие строки должны быть удалены.
<p class="p">Если условия отбора не задаются, то из таблицы удаляются все существующие в ней строки. Однако это не означает, что удаляется вся таблица. Исходная таблица остается, но она остается пустой, незаполненной.
<p class="p">Например, если нам надо удалить результаты прошедшей сессии, то мы можем удалить все строки из отношения s1 следующим оператором:
<p class="definition def">DELETE FROM s1;</p>
<p class="p">Условия отбора в части WHERE имеют тот же вид, что и условия фильтрации в операторе SELECT. Эти условия определяют, какие строки из исходного отношения будут удалены. Например, исключение по какой-либо причине студента Крисса P.O. из таблицы s2 можно выполнить оператором:
<p class="definition def">DELETE FROM s2
WHERE ФИО = 'Крисс P.O.';</p>
<p class="p"><b><center>Операция обновления данных UPDATE</center></b>
<p class="p">Операция обновления данных <b>UPDATE</b> требуется тогда, когда требуется изменить содержимое таблицы. Данный оператор, также как и другие операторы обновления информации БД, применяется к одной конкретной таблице и имеет следующий формат:
<p class="definition def"><b>UPDATE имя_таблицы
SET имя_столбца1 = новое_значение1 [,имя__стол0ца2 = новое_значение2...]
[WHERE условие_отбора]</B></p>
<p class="p">Здесь в предложении <b>UPDATE</b> указывается имя обновляемой таблицы, в предложении <b>SET</b> указываются имена столбцов и новые данные. Новые данные должны быть совместимы с теми данными, которые они призваны заменить.
<p class="p">Часть <b>WHERE</b> является необязательной, также как и в операторе <b>DELETE</b>. Она играет здесь ту же роль, что и в операторе DELETE, — позволяет отобрать строки, к которым будет применена операция модификации. Если условие отбора не задается, то операция модификации будет применена ко всем строкам таблицы.
<p class="p">Рассмотрим операцию обновления данных таблицы базы данных НИР. Предположим, что решено все начисления специалистам увеличить на 10%. Операция обновления информации в связи с этим будет выглядеть следующим образом:
<p class="definition def">UPDATE r3 SET Начисления = Начисления * 1.1;</p>
<p class="p">В том случае, когда модификацию информации необходимо производить выборочно, требуется использование предложения <b>WHERE</b>. Допустим, что в БД Сессия следует произвести изменение данных, поскольку студентка Думская М.Т. пересдала экзамен по физике и получила оценку "отлично" вместо "удовлетворительно". Для решения поставленной задачи необходимо выполнить следующую операцию:
<p class="definition def">UPDATE sI SET s1.Оценка = 5
WHERE sI.ФИО = 'Думская М.Т.' AND
s1.Дисциплина = 'ФИЗИКА';</p>
<p class="p"><b><center>Создание таблиц</center></b>
<p class="p">Создание таблицы осуществляется посредством оператора <b>CREATE TABLE</b>. Его упрошенная версия выглядит следующим образом:
<p class="definition def"><b>CREATE TABLE Имя_таблицы
( Имя_столбца Тип_данных [NULL | NOT NULL ] [,...]}</b></p>
<p class="p">Оператор такого вида приведет к созданию таблицы с именем <Имя_таблицы>, которая будет содержать столько столбцов, сколько их задано в операторе. При определении столбца необходимо задать его имя, тип данных, к которому будут относиться значения этого столбца, а также определить, можно ли в качестве значения рассматриваемого столбца использовать ключевое слово <b>NULL</b>. Ключевым словом <b>NULL</b> помечается такой столбец, который может содержать неопределенные значения.
<p class="p">Определения столбцов первичных ключей отношений всегда должны содержать ключевые слова <b>NOT NULL</b>.

<p class="p">Полное описание оператора <b>CREATE TABLE</b> ДОЛЖНО включать средства поддержки целостности данных. Такие средства представляют собой спецификаторы, позволяющие задать ограничения для предотвращения попыток нарушить согласованность данных. Базовое определение оператора CREATE TABLE имеет следующий формат:

<p class="definition def"><b>CREATE TABLE имя_таблицы<br>
({ имя_столбца тип_даных [NOT NULL] [UNIQUE]<br>
[DEFAULT значение по умолчанию]<br>
[CHECK (условие проверки на допустимость) [,...] }<br>
[PRIMARY KEY (список столбцов),]<br>
{[UNIQUE (список столбцов),] [,...]}<br>
{[FORING KEY {список столбцов внешних ключей)<br>
REFERENCES имя родительской таблицы [(список столбцов <br>ключей-кандидатов)],<br>
[MATCH {PARTIAL | FULL}<br>
[ON UPDATE правило ссылочной целостности]<br>
[ON DELETE правило ссылочной целостности]] [,...]}<br>
{[CHECK (условие проверки на допустимость)] [,...]})</b></p>
<p class="p"><b><center>Обновление таблиц</center></b>
<p class="p">В уже созданную таблицу изменения могут быть внесены с помощью оператора <b>ALTER TABLE</b>, который имеет следующий обобщенный формат:
<p class="definition def"><b>ALTER TABLE имя_таблицы<br>
[ADD [COLUMN] имя столбца тип даных [NOT NULL] [UNIQUE]<br>
[DEFAULT значение по умолчанию] [CHECK (условие проверки на
допустимость)]]<br>
[DROP [COLUMN] ] имя_столбца [RISTRICT | CASCADE]]<br>
[ADD [CONSTRAINT [имя ограничения)] ограничение]<br>
[DROP CONSTRAINT имя ограничения [RISTRICT I CASCADE]]<br>
[ALTER [COLUMN] SET DEFAULT значение по умолчанию]<br>
[ALTER (COLUMN] DROP DEFAULT]</b></p>

<p class="p">В данном формате предусмотрены возможности для выполнения ряда действий:

<ul>
  <li> <p class="q">обавить новый столбец в существующую таблицу — <b>ADD COLUMN;</b>

 <li> <p class="q">удалить столбец из существующей таблицы — <b>DROP COLUMN;</b>

 <li> <p class="q">добавить в определение таблицы новое ограничение — <b>ADD CONSTRAINT;</b>

 <li> <p class="q">удалить из определения таблицы существующее ограничение — <b>DROP; </b>

 <li> <p class="q"> <b>CONSTRAINT;</b>

 <li> <p class="q">задать для существующего столбца значение по умолчанию — <b>ALTER [COLUMN] SET DEFAULT;</b>

 <li> <p class="q"> отменить установленное для столбца значение по умолчанию <b>ALTER [COLUMN] DROP DEFAULT</b>.
</ul>
<p class="p">Добавить в таблицу s1 столбец Группа, содержащий символьный тип данных, можно с помощью оператора:
<p class="definition def">ALTER TABLE s1
ADD Группа varchar (7) NOT NULL;</p>

<p class="p"><b><center>Удаление таблиц</center></b>


<p class="p">Ставшая ненужной таблица может быть удалена из базы данных оператором:

<p class="definition def"><b>DROP TABLE имя таблицы [RISTRICT I CASCADE].</b></p>

<p class="p">Ключевые слова <b>RISTRICT</b> И <b>CASCADE</b> используются для определения условий удаления таблицы в том случае, если в базе данных присутствуют ее дочерние таблицы. Ключевое слово <b>RISTRICT</b> при наличии в базе данных зависимых от удаляемой таблицы объектов вызовет отмену удаления.

<p class="p">Ключевое слово <b>CASCADE</b> в этой ситуации вызовет автоматическое удаление всех объектов базы данных, существование которых зависит отданной таблицы.

<p class="p">Удалим таблицу s1:

<p class="definition def">DROP TABLE s1</p>


<div class="navbt">
	<div class=" btn red d">
		<a  href="13_Nested_subqueries.php" >Предыдущая 
			<div class="btn__blobs">
		      <div></div>
		      <div></div>
		      <div></div>
    		</div>
  		</a>
  	</div>
	<div class=" btn red d">
		<a href="15_Main_features_of_the_client-server_architecture.php">Следующая
			<div class="btn__blobs">
		      <div></div>
		      <div></div>
		      <div></div>
   			</div>
   		</a>
   	</div>
 </div>
</p>
</div>
</main>
 <script src="https://snipp.ru/cdn/jquery/2.1.1/jquery.min.js"></script>
    <script src="https://snipp.ru/cdn/jqueryui/1.12.1/jquery-ui.min.js"></script>
    <script src="https://snipp.ru/cdn/fancybox/2.1.7/source/jquery.fancybox.pack.js"></script>
    <script src="js/registration.js"></script>
    <script src="js/user.js"></script>  
    <script src="js/topic.js"></script>
    