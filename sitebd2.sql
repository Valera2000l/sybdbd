-- phpMyAdmin SQL Dump
-- version 4.9.0.1
-- https://www.phpmyadmin.net/
--
-- Хост: 127.0.0.1:3306
-- Время создания: Янв 08 2021 г., 10:18
-- Версия сервера: 10.3.13-MariaDB-log
-- Версия PHP: 7.1.32

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET AUTOCOMMIT = 0;
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- База данных: `sitebd2`
--

-- --------------------------------------------------------

--
-- Структура таблицы `answers`
--

CREATE TABLE `answers` (
  `id` int(11) NOT NULL,
  `answer` varchar(250) COLLATE utf8mb4_unicode_ci NOT NULL,
  `parent_question` int(11) NOT NULL,
  `correct_answer` enum('0','1') COLLATE utf8mb4_unicode_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `answers`
--

INSERT INTO `answers` (`id`, `answer`, `parent_question`, `correct_answer`) VALUES
(1, 'strict question line', 1, '0'),
(2, 'structured query language', 1, '1'),
(3, 'strong question language', 1, '0'),
(5, 'Where', 2, '0'),
(6, 'Between', 2, '0'),
(7, 'From', 2, '1'),
(8, 'Like', 2, '0'),
(9, 'NEW TABLE', 3, '0'),
(10, 'MAKE TABLE', 3, '0'),
(11, 'CREATE TABLE', 3, '1'),
(12, 'База данных, в которой информация хранится в виде двумерных таблиц, связанных между собой', 4, '1'),
(13, 'База данных, в которой одна ни с чем не связанная таблица', 4, '0'),
(14, 'Любая база данных - реляционная', 4, '0'),
(15, 'Stored Procedures (хранимые процедуры)', 5, '0'),
(16, 'Open Database Connectivity (открытая связь с базами данных)', 5, '1'),
(17, 'Structured Query Language (структурный язык запросов)', 5, '0'),
(18, 'Triggers (триггеры)', 5, '0'),
(19, 'select concat IN (`index`, `city`) from Orders;', 6, '0'),
(20, 'select concat = index and city from Orders;', 6, '0'),
(21, 'select concat(`index`,\" \", `city`) from Orders;', 6, '1'),
(22, 'Любой текстовый файл', 7, '0'),
(23, 'Организованная структура для хранения информации', 7, '1'),
(24, 'Любая электронная таблица', 7, '0'),
(25, 'Любая информация, представленная в табличной форме', 7, '0'),
(101, 'Любая система обработки информации', 32, '1'),
(102, 'Система обработки текстовой информации ', 32, '0'),
(103, 'Система обработки графической информации ', 32, '0'),
(104, 'Система обработки табличных данных ', 32, '0'),
(105, 'Нет верного варианта ', 32, '0'),
(106, 'Банк данных ', 33, '1'),
(107, 'База данных ', 33, '0'),
(108, 'Информационная система ', 33, '0'),
(109, 'Словарь данных ', 33, '0'),
(110, 'Вычислительная система', 33, '0'),
(111, 'База данных ', 34, '1'),
(112, 'СУБД', 34, '0'),
(113, 'Словарь данных ', 34, '0'),
(114, 'Информационная система ', 34, '0'),
(115, 'Вычислительная система', 34, '0'),
(116, 'СУБД', 35, '1'),
(117, 'База данных ', 35, '0'),
(118, 'Словарь данных  ', 35, '0'),
(119, 'Вычислительная система ', 35, '0'),
(120, 'Информационная система', 35, '0'),
(121, 'Словарь данных ', 36, '0'),
(122, 'Информационная система ', 36, '0'),
(123, 'Вычислительная система ', 36, '1'),
(124, 'СУБД', 36, '0'),
(125, 'База данных', 36, '0'),
(126, 'Логическая структура данных, хранимых в базе данных ', 37, '1'),
(127, 'Физическая структура данных, хранимых в базе данных ', 37, '0'),
(128, 'Иерархическая структура данных ', 37, '0'),
(129, 'Сетевая структура данных ', 37, '0'),
(130, 'Нет верного варианта ', 37, '0'),
(131, 'Реляционная модель ', 38, '1'),
(132, 'Сетевая модель данных ', 38, '0'),
(133, 'Иерархическая модель данных ', 38, '0'),
(134, 'Системы инвертированных списков ', 38, '0'),
(135, 'Все вышеперечисленные варианты', 38, '0'),
(136, 'Таблиц', 39, '1'),
(137, 'Списков', 39, '0'),
(138, 'Графа типа дерева ', 39, '0'),
(139, 'Произвольного графа ', 39, '0'),
(140, 'Файлов', 39, '0'),
(141, 'Таблиц ', 40, '0'),
(142, 'Списков', 40, '0'),
(143, 'Упорядоченного графа ', 40, '0'),
(144, 'Произвольного графа', 40, '1'),
(145, 'Файлов', 40, '0'),
(146, 'Таблиц', 41, '0'),
(147, 'Списков', 41, '0'),
(148, 'Упорядоченного графа', 41, '1'),
(149, 'Произвольного графа ', 41, '0'),
(150, 'Файлов', 41, '0'),
(151, 'Кодд', 42, '1'),
(152, 'фон Нейман ', 42, '0'),
(153, 'Тьюринг ', 42, '0'),
(154, 'Паскаль', 42, '0'),
(155, 'Лейбниц ', 42, '0'),
(156, 'Файл', 43, '0'),
(157, 'Список', 43, '0'),
(158, 'Таблицу', 43, '1'),
(159, 'Связь между таблицами ', 43, '0'),
(160, 'Нет правильного варианта', 43, '0'),
(161, 'Строка таблицы ', 44, '1'),
(162, 'Столбец таблицы ', 44, '0'),
(163, 'Таблица', 44, '0'),
(164, 'Несколько связанных таблиц ', 44, '0'),
(165, 'Список', 44, '0'),
(166, 'Строка таблицы ', 45, '0'),
(167, 'Столбец таблицы ', 45, '1'),
(168, 'Таблица ', 45, '0'),
(169, 'Межтабличная связь ', 45, '0'),
(170, 'Нет правильного варианта', 45, '0'),
(171, 'Множество логически неделимых допустимых значений для того или иного атрибута ', 46, '1'),
(172, 'Множество атрибутов ', 46, '0'),
(173, 'Множество кортежей ', 46, '0'),
(174, 'Логически неделимые, конкретные значения того или иного атрибута ', 46, '0'),
(175, 'Нет правильного варианта ', 46, '0'),
(176, 'Первичный ключ ', 47, '1'),
(177, 'Внешний ключ ', 47, '0'),
(178, 'Индекс', 47, '0'),
(179, 'Степень отношения ', 47, '0'),
(180, 'Нет правильного варианта', 47, '0'),
(181, 'Индекс', 48, '1'),
(182, 'Хеш-код ', 48, '0'),
(183, 'Первичный ключ ', 48, '0'),
(184, 'Внешний ключ ', 48, '0'),
(185, 'Нет верного варианта ', 48, '0'),
(186, 'Индекс', 49, '1'),
(187, 'Хеш-код ', 49, '0'),
(188, 'Первичный ключ ', 49, '0'),
(189, 'Внешний ключ ', 49, '0'),
(190, 'Нет верного варианта ', 49, '0'),
(191, 'Хешированием', 50, '1'),
(192, 'Индексированием', 50, '0'),
(193, 'Определение ключа', 50, '0'),
(194, 'Обновлением', 50, '0'),
(195, 'Нет верного варианта ', 50, '0'),
(196, 'Реляционной базой данных ', 51, '1'),
(197, 'Дореляционной БД ', 51, '0'),
(198, 'Постреляционной БД ', 51, '0'),
(199, 'Все выше перечисленное ', 51, '0'),
(200, 'Нет правильного варианта', 51, '0'),
(201, 'Связь отсутствует ', 52, '0'),
(202, 'Связь один к одному ', 52, '1'),
(203, 'Связь один ко многим', 52, '0'),
(204, 'Связь многие к одному ', 52, '0'),
(205, 'Связь многие ко многим', 52, '0'),
(206, 'Связь отсутствует ', 53, '0'),
(207, 'Связь один к одному ', 53, '0'),
(208, 'Связь один ко многим ', 53, '0'),
(209, 'Связь многие к одному ', 53, '1'),
(210, 'Связь многие ко многим ', 53, '0'),
(211, 'Связь отсутствует ', 54, '0'),
(212, 'Связь один к одному ', 54, '0'),
(213, 'Связь один ко многим ', 54, '1'),
(214, 'Связь многие к одному ', 54, '0'),
(215, 'Связь многие ко многим', 54, '0'),
(216, 'Дом : Жильцы', 55, '1'),
(217, 'Студент : Стипендия   ', 55, '0'),
(218, 'Студенты : Группа ', 55, '0'),
(219, 'Студенты : Преподаватели ', 55, '0'),
(220, 'Нет подходящего варианта ', 55, '0'),
(221, 'Дом : Жильцы ', 56, '0'),
(222, 'Студент : Стипендия  ', 56, '0'),
(223, 'Студенты : Группа ', 56, '1'),
(224, 'Студенты : Преподаватели ', 56, '0'),
(225, 'Нет подходящего варианта ', 56, '0'),
(226, 'Первичный ключ ', 57, '0'),
(227, 'Внешний ключ ', 57, '1'),
(228, 'Индекс', 57, '0'),
(229, 'Степень отношения ', 57, '0'),
(230, 'Нет правильного варианта ', 57, '0'),
(231, 'Реляционной алгеброй', 58, '1'),
(232, 'Реляционным исчислением ', 58, '0'),
(233, 'Языком программирования', 58, '0'),
(234, 'Все варианты верные ', 58, '0'),
(235, 'Нет правильного варианта ', 58, '0'),
(236, 'SQL', 59, '1'),
(237, 'Visual FoxPro  ', 59, '0'),
(238, 'Visual Basic ', 59, '0'),
(239, 'Delphi', 59, '0'),
(240, 'Нет правильного варианта ', 59, '0'),
(241, 'Выборкой', 60, '1'),
(242, 'Объединением', 60, '0'),
(243, 'Пересечением ', 60, '0'),
(244, 'Вычитанием ', 60, '0'),
(245, 'Соединением ', 60, '0'),
(246, 'Выборкой', 61, '0'),
(247, 'Объединением', 61, '1'),
(248, 'Пересечением', 61, '0'),
(249, 'Вычитанием', 61, '0'),
(250, 'Соединением', 61, '0'),
(251, 'Выборкой', 62, '0'),
(252, 'Объединением ', 62, '0'),
(253, 'Пересечением ', 62, '0'),
(254, 'Вычитанием', 62, '1'),
(255, 'Соединением', 62, '0'),
(256, 'Произведением', 63, '1'),
(257, 'Объединением  ', 63, '0'),
(258, 'Пересечением', 63, '0'),
(259, 'Вычитанием', 63, '0'),
(260, 'Соединением ', 63, '0'),
(261, 'Символьный', 64, '0'),
(262, 'Числовой', 64, '0'),
(263, 'Дата-время ', 64, '0'),
(264, 'Строковый ', 64, '0'),
(265, 'Все варианты верные ', 64, '1'),
(289, 'Сервер', 68, '0'),
(290, 'Клиент', 68, '0'),
(291, 'Сеть и коммуникационное программное обеспечение ', 68, '0'),
(292, 'Все выше перечисленное ', 68, '1'),
(293, 'Только варианты 1 и 2 ', 68, '0'),
(294, 'Сервер базы данных', 69, '1'),
(295, 'Клиенты', 69, '0'),
(296, 'Сеть', 69, '0'),
(297, 'Коммуникационное программное обеспечение', 69, '0'),
(298, 'Нет правильного ответа', 69, '0'),
(299, 'Сервер базы данных ', 70, '0'),
(300, 'Клиенты', 70, '1'),
(301, 'Сеть', 70, '0'),
(302, 'Коммуникационное программное обеспечение ', 70, '0'),
(303, 'Нет правильного ответа ', 70, '0'),
(304, 'Повреждения данных в аварийных ситуациях ', 71, '1'),
(305, 'Несанкционированного доступа к данным ', 71, '0'),
(306, 'Несанкционированного ввода данных ', 71, '0'),
(307, 'Изменения логической структуры БД ', 71, '0'),
(308, 'Нет правильного варианта ', 71, '0'),
(309, 'Хранимых процедур', 72, '0'),
(310, 'Правил', 72, '0'),
(311, 'Триггеров', 72, '0'),
(312, 'Нет правильного варианта ', 72, '0'),
(313, 'Всего выше перечисленного ', 72, '1'),
(314, 'Набор основных действий и манипуляций с данными ', 73, '0'),
(315, 'Хранятся на сервере', 73, '0'),
(316, 'Программы \"клиенты\" способны их выполнять ', 73, '0'),
(317, 'Нет правильного варианта ', 73, '0'),
(318, 'Все выше перечисленное', 73, '1'),
(319, 'Индекс', 74, '1'),
(320, 'Хеш-код ', 74, '0'),
(321, 'Первичный ключ ', 74, '0'),
(322, 'Внешний ключ ', 74, '0'),
(323, 'Нет верного варианта ', 74, '0'),
(324, 'Индекс', 75, '1'),
(325, 'Хеш-код ', 75, '0'),
(326, 'Первичный ключ ', 75, '0'),
(327, 'Внешний ключ ', 75, '0'),
(328, 'Нет верного варианта ', 75, '0'),
(329, 'Один или несколько внешних ключей ', 76, '1'),
(330, 'Один и только один внешний ключ ', 76, '0'),
(331, 'Внешний ключ быть не может единственным ', 76, '0'),
(332, 'Количество внешних ключей определяется количеством полей в таблице ', 76, '0'),
(333, 'Нет правильного варианта ', 76, '0'),
(334, 'Select', 77, '1'),
(335, 'Distinct', 77, '0'),
(336, 'Where', 77, '0'),
(337, 'Having', 77, '0'),
(338, 'Create', 77, '0'),
(339, 'Order by ', 78, '0'),
(340, 'Distinct', 78, '1'),
(341, 'Where', 78, '0'),
(342, 'Having', 78, '0'),
(343, 'Create', 78, '0'),
(344, 'Order by ', 79, '0'),
(345, 'Distinct ', 79, '0'),
(346, 'Where', 79, '1'),
(347, 'Having', 79, '0'),
(348, 'Create', 79, '0'),
(349, 'Order by ', 80, '0'),
(350, 'Distinct ', 80, '0'),
(351, 'Where', 80, '0'),
(352, 'Having', 80, '0'),
(353, 'Group by ', 80, '1'),
(354, 'ROLLBACK', 81, '1'),
(355, 'BEGIN TRANSAKTION', 81, '0'),
(356, 'SAVE TRANSACTION', 81, '0'),
(357, 'COMMIT TRANSACKTION', 81, '0'),
(358, 'Все ответы верны', 81, '0'),
(359, 'UPDATE TABLE', 82, '1'),
(360, 'ALTER TABLE', 82, '0'),
(361, 'DROP TABLE', 82, '0'),
(362, 'CREATE TABLE  ', 82, '0'),
(369, 'Автоматизированном проектировании', 83, '0'),
(370, 'Разработке web-приложений', 83, '1'),
(371, 'Создании и управлении базами данных', 83, '0'),
(396, 'PHP – Hypertext preprocessor (препроцессор гипертекста);', 87, '1'),
(397, 'PHP – perfect HTML power (HTML повышенной мощности);', 87, '0'),
(398, 'PHP – permutation HTML program (программа изменения HTML)', 87, '0'),
(404, 'Правильность и непротиворечивость его содержимого', 88, '1'),
(405, 'Противоречивость его содержимого', 88, '0'),
(406, 'Неправильность его содержимого', 88, '0'),
(407, 'Чтение, удаление, вставка и модификация содержимого БД', 88, '0'),
(408, 'Обработка или выдача правильных данных', 88, '0'),
(409, 'Язык SQL', 89, '0'),
(410, 'Целостность БД', 89, '0'),
(411, 'Ключ', 89, '0'),
(412, 'Транзакция', 89, '1'),
(413, 'Значение Null', 89, '0'),
(414, 'ROLLBACK', 90, '1'),
(415, 'BEGIN TRANSAKTION', 90, '0'),
(416, 'SAVE TRANSACTION', 90, '0'),
(417, 'COMMIT TRANSACKTION', 90, '0'),
(418, 'Все ответы верны', 90, '0'),
(419, 'Автоматизированность', 91, '0'),
(420, 'Изолированность', 91, '0'),
(421, 'Атомарность', 91, '0'),
(422, 'Долговременность', 91, '1'),
(423, 'Согласованность', 91, '0'),
(424, 'Автоматизированность', 92, '0'),
(425, 'Атомарность', 92, '1'),
(426, 'Согласованность', 92, '0'),
(427, 'Долговременность', 92, '0'),
(428, 'Изолированность', 92, '0'),
(434, 'Восстановление объектов', 94, '0'),
(435, 'Удаление объектов', 94, '0'),
(436, 'Чтение объектов', 94, '0'),
(437, '\"Захват\" объектов', 94, '1'),
(438, '\"Освобождение\" объектов', 94, '0'),
(454, 'Атрибуты не упорядочены слева направо, что не нарушает целостности данных', 97, '0'),
(455, 'В отношении не бывает двух одинаковых кортежей', 97, '0'),
(456, 'В отношении может быть сколько угодно одинаковых кортежей', 97, '1'),
(457, 'Кортежи не упорядочены сверху вниз, что не приводит к потере информации', 97, '0'),
(458, 'Значения атрибутов состоят из логически неделимых единиц', 97, '0'),
(459, 'Выборкой', 98, '0'),
(460, 'Объединением', 98, '1'),
(461, 'Пересечением', 98, '0'),
(462, 'Вычитанием', 98, '0'),
(463, 'Соединением', 98, '0'),
(464, 'Соединением', 99, '0'),
(465, 'Вычитанием', 99, '0'),
(466, 'Объединением', 99, '0'),
(467, 'Произведением', 99, '1'),
(468, 'Пересечением', 99, '0'),
(469, 'Первичный ключ', 100, '0'),
(470, 'Внешний ключ', 100, '1'),
(471, 'Индекс', 100, '0'),
(472, 'Степень отношения', 100, '0'),
(473, 'Нет правильного варианта', 100, '0'),
(474, 'Любая система обработки информации', 101, '0'),
(475, 'Система обработки текстовой информации', 101, '0'),
(476, 'Система обработки графической информации', 101, '0'),
(477, 'Система обработки табличных данных', 101, '0'),
(478, 'Нет верного варианта', 101, '1'),
(479, 'Банк данных', 102, '1'),
(480, 'База данных', 102, '0'),
(481, 'Информационная система', 102, '0'),
(482, 'Словарь данных', 102, '0'),
(483, 'Вычислительная система', 102, '0'),
(484, 'СУБД', 103, '0'),
(485, 'Словарь данных', 103, '0'),
(486, 'База данных', 103, '1'),
(487, 'Информационная система', 103, '0'),
(488, 'Вычислительная система', 103, '0'),
(489, 'База данных', 104, '0'),
(490, 'СУБД', 104, '1'),
(491, 'Вычислительная система', 104, '0'),
(492, 'Информационная система', 104, '0'),
(493, 'Словарь данных', 104, '0'),
(494, 'NoSQL', 105, '0'),
(495, 'Реляционная модель', 105, '1'),
(496, 'Иерархическая модель', 105, '0'),
(497, 'Сетевая модель', 105, '0'),
(498, 'Многомерная модель', 105, '0'),
(499, 'Списков', 106, '0'),
(500, 'Графа типа дерева', 106, '0'),
(501, 'Произвольного графа', 106, '0'),
(502, 'Таблиц', 106, '1'),
(503, 'Файлов', 106, '0'),
(504, 'Таблиц', 107, '0'),
(505, 'Списков', 107, '0'),
(506, 'Упорядоченного графа', 107, '0'),
(507, 'Произвольного графа', 107, '1'),
(508, 'Файлов', 107, '0'),
(509, 'Списков', 108, '0'),
(510, 'Документов', 108, '0'),
(511, 'Таблиц', 108, '0'),
(512, 'Произвольного графа', 108, '0'),
(513, 'Упорядоченного графа', 108, '1'),
(514, 'фон Нейман', 109, '0'),
(515, 'Кодд', 109, '1'),
(516, 'Паскаль', 109, '0'),
(517, 'Лейбниц', 109, '0'),
(518, 'Тьюринг', 109, '0'),
(519, 'Файл', 110, '0'),
(520, 'Список', 110, '0'),
(521, 'Таблицу', 110, '1'),
(522, 'Связь между таблицами', 110, '0'),
(523, 'Нет правильного ответа', 110, '0'),
(524, 'Запись таблицы', 111, '1'),
(525, 'Поле таблицы', 111, '0'),
(526, 'Таблица', 111, '0'),
(527, 'Несколько связанных таблиц', 111, '0'),
(528, 'Список', 111, '0'),
(529, 'Запись таблицы', 112, '1'),
(530, 'Поле таблицы', 112, '0'),
(531, 'Таблица', 112, '0'),
(532, 'Несколько связанных таблиц', 112, '0'),
(533, 'Список', 112, '0'),
(534, 'Запись таблицы', 113, '0'),
(535, 'Поле таблицы', 113, '1'),
(536, 'Таблица', 113, '0'),
(537, 'Межтабличная связь', 113, '0'),
(538, 'Нет правильного варианта', 113, '0'),
(539, 'Множество логически неделимых допустимых значений для того или иного атрибута', 114, '1'),
(540, 'Множество атрибутов', 114, '0'),
(541, 'Множество кортежей', 114, '0'),
(542, 'Логически неделимые, конкретные значения того или иного атрибута', 114, '0'),
(543, 'Нет правильного варианта', 114, '0'),
(544, 'Внешний ключ', 115, '0'),
(545, 'Первичный ключ', 115, '1'),
(546, 'Индекс', 115, '0'),
(547, 'Степень отношения', 115, '0'),
(549, 'Связь отсутствует', 116, '0'),
(550, 'Связь один к одному', 116, '1'),
(551, 'Связь один ко многим', 116, '0'),
(552, 'Связь многие к одному', 116, '0'),
(553, 'Связь многие ко многим', 116, '0'),
(554, 'Связь отсутствует', 117, '0'),
(555, 'Связь один к одному', 117, '0'),
(556, 'Связь один ко многим', 117, '0'),
(557, 'Связь многие к одному', 117, '1'),
(558, 'Связь многие ко многим', 117, '0'),
(559, 'Группа : Студенты', 118, '1'),
(560, 'Студент : Стипендия', 118, '0'),
(561, 'Студенты : Группа', 118, '0'),
(562, 'Студенты : Преподаватели', 118, '0'),
(563, 'Нет подходящего варианта', 118, '0'),
(564, 'Реляционным исчислением', 119, '0'),
(565, 'Реляционной алгеброй', 119, '1'),
(566, 'Языком программирования', 119, '0'),
(567, 'Все варианты верные', 119, '0'),
(568, 'Нет правильного варианта', 119, '0'),
(569, 'Объединением', 120, '0'),
(570, 'Выборкой', 120, '1'),
(571, 'Пересечением', 120, '0'),
(572, 'Вычитанием', 120, '0'),
(573, 'Соединением', 120, '0'),
(574, 'Консистентность данных', 121, '0'),
(575, 'Ссылочная целостность', 121, '1'),
(576, 'Контроль завершения транзакций', 121, '0'),
(577, 'Нет правильного варианта', 121, '0'),
(579, 'Из одного атрибута, длина значения которого больше заданного количества символов', 122, '0'),
(580, 'Из одного атрибута', 122, '0'),
(581, 'Из нескольких атрибутов', 122, '1'),
(582, 'Из нескольких кортежей', 122, '0'),
(583, 'Нет правильного варианта', 122, '0'),
(589, 'покортежное хранение отношений', 123, '1'),
(590, 'построчное хранение отношений', 123, '0'),
(591, 'хранение отношений по столбцам', 123, '0'),
(592, 'хранение отношений', 123, '0'),
(612, 'целостность', 126, '0'),
(613, 'уникальность', 126, '1'),
(614, 'изолированность', 126, '0'),
(615, 'согласованость', 126, '0'),
(616, 'поддержание механизма триггеров', 127, '0'),
(617, 'создание сложных запросов', 127, '0'),
(618, 'поддержание механизма транзакций', 127, '1'),
(619, 'индексирование полей', 127, '0'),
(620, 'планирование транзакций', 128, '0'),
(621, 'изолированность транзакций', 128, '0'),
(622, 'избыточность транзакций', 128, '0'),
(623, 'сериализация транзакций', 128, '1'),
(624, 'архивной копии', 129, '0'),
(625, 'журнала изменений', 129, '1'),
(626, 'транзакции', 129, '0'),
(627, 'буферизации', 129, '0'),
(628, 'жестким сбоем', 130, '0'),
(629, 'гибким сбоем', 130, '0'),
(630, 'мягким сбоем', 130, '1'),
(631, 'индивидуальным откатом', 130, '0'),
(632, 'связывание транзакций в обратный список', 131, '0'),
(633, 'наличие точек физической согласованности БД', 131, '0'),
(634, 'буфер журнала', 131, '0'),
(635, 'журнал и архивная копия БД', 131, '1'),
(636, 'избыточное хранение данных в журнале', 132, '1'),
(637, 'индивидуальный откат транзакций', 132, '0'),
(638, 'производство архивных копий', 132, '0'),
(639, 'изолированность пользователей', 132, '0'),
(640, 'буферизация', 133, '0'),
(641, 'транзакция', 133, '1'),
(642, 'сериализация', 133, '0'),
(643, 'журнализация', 133, '0'),
(644, 'COMMIT', 134, '0'),
(645, 'REVOKE', 134, '0'),
(646, 'DISTINCT', 134, '0'),
(647, 'ROLLBACK', 134, '1'),
(648, 'мягким сбоем', 135, '0'),
(649, 'жестким сбоем', 135, '1'),
(650, 'откатом', 135, '0'),
(656, 'База данных, в которой информация хранится в виде двумерных таблиц, связанных между собой', 136, '1'),
(657, 'База данных, в которой одна ни с чем не связанная таблица', 136, '0'),
(658, 'Любая база данных - реляционная', 136, '0'),
(659, 'Совокупность данных, не связанных между собой', 136, '0'),
(660, 'select ALL from Orders;', 137, '0'),
(661, 'select % from Orders;', 137, '0'),
(662, 'select * from Orders;', 137, '1'),
(663, 'select *.Orders from Orders;', 137, '0'),
(664, 'Неотсортированные номера и даты всех заказов с именами заказчиков', 138, '1'),
(665, 'Никакие, запрос составлен неверно', 138, '0'),
(666, 'Номера и даты всех заказов с именами заказчиков, отсортированные по первой колонке', 138, '0'),
(667, 'Номера и даты всех заказов с именами заказчиков, отсортированные по всем колонкам, содержащим слово Order', 138, '0'),
(668, 'Все верно, запрос покажет все заказы, продавцы которых не проставлены', 140, '0'),
(669, 'NULL нужно взять в кавычки', 140, '0'),
(670, 'Сравнение с NULL можно проводить только с оператором IS', 140, '1'),
(671, 'Сравнение с NULL можно проводить только с оператором ON', 140, '0'),
(672, 'Уникальные ID продавцов, отсортированные по возрастанию', 141, '0'),
(673, 'Ничего, запрос составлен неверно, ORDER BY всегда ставится в конце запроса', 141, '1'),
(674, 'Уникальные ID продавцов, отсортированные по убыванию', 141, '0'),
(675, 'Неотсортированные никак уникальные ID продавцов', 141, '0'),
(676, 'select concat = index and city from Orders;', 142, '0'),
(677, 'нет правильного примера', 142, '0'),
(678, 'select concat IN (`index`, `city`) from Orders;', 142, '0'),
(679, 'select concat(`index`,\" \", `city`) from Orders;', 142, '1'),
(680, 'необходим, чтобы показать все заказы, содержащие цифру 10', 143, '0'),
(681, 'необходим, чтобы показать первых 10 записей в запросе', 143, '1'),
(682, 'необходим, чтобы показать рандомные 10 записей в запрос', 143, '0'),
(683, 'не существует такого оператора', 143, '0'),
(684, 'функции, которые фильтруют значения', 144, '0'),
(685, 'функции, которые работают с набором данных, превращая их в одно итоговое значение', 144, '1'),
(686, 'функции, которые сортируют значения', 144, '0'),
(687, 'функции, которые суммируют все значения', 144, '0'),
(688, 'да, но данный запрос составлен неверно, надо так: select * from Orders where price IN (min, max);', 145, '0'),
(689, 'да, в результате мы получим стоимости, отсортированные от минимальной к максимальной', 145, '0'),
(690, 'нет, две функции использовать одновременно нельзя', 145, '0'),
(691, 'да, в результате мы получим минимальную и максимальную стоимости', 145, '1'),
(692, 'ничего, запрос составлен неверно, для указания условия должно быть использовано WHERE', 146, '0'),
(693, 'ничего, запрос составлен неверно, HAVING указывается до группировки', 146, '0'),
(694, 'количество продавцов, у которых 2, 4 или 6 товаров', 146, '0'),
(695, 'количество заказов сгруппированное по продавцам 2, 4 и 6', 146, '1'),
(696, 'операция объединения', 147, '1'),
(697, 'операция группировки', 147, '0'),
(698, 'операция суммирования', 147, '0'),
(699, 'операция создания', 147, '0'),
(700, 'select Orders.id, Orders.customer_name, Sellers.id from Orders LEFT JOIN ON Sellers AND Orders.seller_id = Sellers.id;', 148, '0'),
(701, 'select id AND customer_name AND seller_id from Orders LEFT JOIN Sellers ON seller_id = id;', 148, '0'),
(702, 'select Orders.id, Orders.customer_name, Sellers.id from Orders JOIN Sellers WHEN Orders.seller_id = Sellers.id;', 148, '0'),
(703, 'select Orders.id, Orders.customer_name, Sellers.id from Orders LEFT JOIN Sellers ON Orders.seller_id = Sellers.id;', 148, '1'),
(704, 'Это одно и то же', 149, '0'),
(705, 'VARCHAR не существует', 149, '0'),
(706, 'CHAR - это тип данных, а VARCHAR - подтип', 149, '0'),
(707, 'CHAR дополняет строку пробелами до максимальной длины, а VARCHAR тратит лишнюю память на хранение значения длины строки', 149, '1'),
(708, 'INSERT INTO `SimpleTable` (`some_text`) VALUES (\"my text\");', 150, '1'),
(709, 'INSERT INTO `SimpleTable` SET `some_text`=\"my text\";', 150, '0'),
(710, 'SET INTO `SimpleTable` VALUE `some_text`=\"my text\";', 150, '0'),
(711, 'UPDATE INTO `SimpleTable` SET `some_text`=\"my text\";', 150, '0'),
(712, 'Использовать MULTI INSERT INTO вместо INSERT INTO', 151, '0'),
(713, 'Использовать подзапрос', 151, '0'),
(714, 'Перечислить через запятую все наборы значений после VALUES', 151, '1'),
(715, 'Никак, расходимся по домам', 151, '0'),
(716, 'Именно так и делаю, UPDATE не использую', 152, '0'),
(717, 'Потому что в записи могут быть автоматически проставляемые поля, такие как auto_increment или timestamp, которые собьются при внесении записи заново', 152, '1'),
(718, 'Так меньше нагрузки на базу, ведь команда одна, а не две', 152, '0'),
(719, 'Как раз удалять записи в SQL нельзя, вместо этого используется UPDATE с NULL-значениями для всех полей', 152, '0'),
(720, 'Зачем заранее, просто вызвать его и посмотреть какие записи пропали', 153, '0'),
(721, 'Заменить DELETE на SELECT *, ведь в остальном синтаксис DELETE похож на синтаксис простого SELECT', 153, '1'),
(722, 'Сделать DELETE с LIMIT 1, одну запись не жалко', 153, '0'),
(723, 'SQL создан для хранения данных, их нельзя удалять', 153, '0'),
(724, 'CREATE TABLE', 154, '1'),
(725, 'MAKE TABLE', 154, '0'),
(726, 'SET TABLE', 154, '0'),
(727, 'Создавать таблицы можно только через интерфейс СУБД, специальной SQL команды для этого нет', 154, '0'),
(728, 'Тип бывает только у таблицы, а не у поля таблицы', 155, '0'),
(729, 'Нет, только пересоздать таблицу', 155, '0'),
(730, 'Да, достаточно сделать INSERT с новым типом данных', 155, '0'),
(731, 'Да, при помощи команды ALTER', 155, '1'),
(732, 'Запрос составлен правильно', 158, '0'),
(733, 'Mike необходимо записать в кавычках \'Mike\'', 158, '1'),
(734, 'Нужно убрать лишние поля из запроса', 158, '0'),
(735, 'Строчку с where поменять местами с from', 158, '0'),
(736, 'SELECT ALL Persons', 159, '0'),
(737, 'SELECT .[Persons]', 159, '0'),
(738, 'SELECT * FROM Persons', 159, '1'),
(745, 'SELECT DIFFERENT', 160, '0'),
(746, 'SELECT DISCINCT', 160, '1'),
(747, 'SELECT UNIQUE', 160, '0'),
(748, 'COUNT ROW IN Persons', 161, '0'),
(749, 'SELECT ROWS FROM Persons', 161, '0'),
(750, 'SELECT COUNT(*) FROM Persons', 161, '1'),
(751, 'INTO, IN', 162, '0'),
(752, 'FROM, BETWEEN', 162, '1'),
(753, 'FROM, IN', 162, '0'),
(754, 'SELECT * FROM USERS', 163, '0'),
(755, 'SELECT * FROM Users LIMIT 14', 163, '1'),
(756, 'SELECT * LIMIT 14 FROM Users', 163, '0'),
(757, '*, Customers', 164, '0'),
(758, 'NULL, Customers', 164, '0'),
(759, 'Name, Customers', 164, '1'),
(760, 'SELECT * FROM Countries WHERE ID !=8', 165, '1'),
(761, 'SELECT * FROM Countries EXP ID=8', 165, '0'),
(762, 'SELECT ALL FROM Countries LIMIT 8', 165, '0'),
(763, 'TOP', 166, '0'),
(764, 'UPPER', 166, '1'),
(765, 'UP', 166, '0'),
(766, 'SET Salary=2500 FROM Salary=2000 FOR ID=7 FROM Employees', 167, '0'),
(767, 'UPDATE Employees SET Salary=2500 WHERE ID=7', 167, '1'),
(768, 'ALTER TABLE Employees Salary=2500 FOR ID=7', 167, '0'),
(769, 'Полное удаление базы данных «Users»', 168, '1'),
(770, 'Блокировка на внесение изменений в базу данных «Users»', 168, '0'),
(771, 'Удаление таблицы «Users» из текущей базы данных', 168, '0'),
(772, 'Для переименования полей', 169, '0'),
(773, 'Для назначения имени источнику данных в запросе при использовании выражения в качестве источника данных или для упрощения структуры запросов', 169, '1'),
(774, 'Для более точного указания источника данных, если в базе данных содержатся таблицы с одинаковыми названиями полей', 169, '0'),
(775, 'Create Database и Drop Database', 170, '0'),
(776, 'Create Table  и Drop Table', 170, '0'),
(777, 'Insert, Delete  и Update', 170, '1'),
(778, 'Like, Between  и In', 170, '0'),
(779, 'Select, From  и Where', 170, '0'),
(780, 'Объединить несколько  таблиц по их столбцам', 171, '1'),
(781, 'Объединить несколько столбцов одной таблицы', 171, '0'),
(782, 'Объединить несколько строк одной таблицы', 171, '0'),
(783, 'Объединить несколько  таблиц по их строкам', 171, '0'),
(784, 'Объединить несколько  таблиц по их столбцам и строкам', 171, '0'),
(785, 'Like Table, Between Table и In Table', 172, '0'),
(786, 'Select Table, From Table  и Where Table', 172, '0'),
(787, 'Insert Table, Delete Table  и Update Table', 172, '0'),
(788, 'Create Database и Drop Database', 172, '0'),
(789, 'Create Table  и Drop Table', 172, '1'),
(790, 'Not', 173, '0'),
(791, 'As', 173, '0'),
(792, 'Ins', 173, '0'),
(793, 'And', 173, '0'),
(794, 'Or', 173, '0'),
(795, 'Des', 173, '1'),
(820, 'String', 175, '1'),
(821, 'Int', 175, '0'),
(822, 'Boolean', 175, '0'),
(823, 'Float', 175, '0'),
(824, 'Невозможно определить по заданным условиям', 176, '0'),
(825, '3', 176, '1'),
(826, '2', 176, '0'),
(827, '3, 2, 1, 4', 177, '1'),
(828, '1, 3, 2, 4', 177, '0'),
(829, '3, 1, 4, 2', 177, '0'),
(830, 'Для получения доступа к глобальной переменной, которая находится внутри функции', 178, '1'),
(831, 'Для подключения библиотек из глобального каталога', 178, '0'),
(832, 'Для указания того, что переменная будет многократно использоваться', 178, '0'),
(833, 'Boolean', 179, '0'),
(834, 'String', 179, '0'),
(835, 'Int', 179, '1'),
(836, 'Рекурсия', 180, '1'),
(837, 'Регрессия', 180, '0'),
(838, 'Массив', 180, '0'),
(839, 'Двоеточием (:)', 181, '0'),
(840, 'Точкой с запятой (;)', 181, '1'),
(841, 'Знаки препинания в php не используются', 181, '0'),
(842, 'fopen (\"filename.txt\",\"r\")', 182, '1'),
(843, 'open (\"filename.txt\",\"read\")', 182, '0'),
(844, 'fopen (\"filename.txt\",\"r+\")', 182, '0'),
(845, '$count+1', 183, '0'),
(846, '$count++', 183, '1'),
(847, '$count=+1', 183, '0'),
(848, '$my-Var', 184, '1'),
(849, '$myVar', 184, '0'),
(850, '$my_Var', 184, '0'),
(851, 'Динамическая', 185, '1'),
(852, 'Синтаксическая', 185, '0'),
(853, 'Коммутационная', 185, '0'),
(854, 'Boolean, float, logic, text, subject, NULL', 186, '0'),
(855, 'String, boolean, text, massive, logic, NULL', 186, '0'),
(856, 'Boolean, integer, float, string, array, object, resource, NULL', 186, '1'),
(857, 'C и Perl', 187, '1'),
(858, '.Net', 187, '0'),
(859, 'VBScript', 187, '0'),
(860, '<>', 188, '0'),
(861, '$', 188, '1'),
(862, '!', 188, '0'),
(863, '$name++\'Mike\';\r\n$age++’37”;\r\necho $age;\r\n', 189, '0'),
(864, '?name = Mike;\r\n?age = 37;\r\necho $name;\r\n', 189, '0'),
(865, '$name = \'Mike\';\r\n$age = 37;\r\necho $name;\r\n', 189, '1'),
(878, 'David went to the store', 190, '1'),
(879, 'Rob went to the mall', 190, '0'),
(880, 'в)	David went to the mall', 190, '0');

-- --------------------------------------------------------

--
-- Структура таблицы `answers_practice3`
--

CREATE TABLE `answers_practice3` (
  `id` int(11) NOT NULL,
  `block` varchar(50) COLLATE utf8mb4_unicode_ci NOT NULL,
  `number_block` int(2) NOT NULL,
  `parent_quest` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `answers_practice3`
--

INSERT INTO `answers_practice3` (`id`, `block`, `number_block`, `parent_quest`) VALUES
(1, 'SELECT', 1, 1),
(2, '*', 2, 1),
(3, 'FROM', 3, 1),
(4, 'student', 4, 1),
(5, 'WHERE', 5, 1),
(6, 'city', 6, 1),
(7, '=', 7, 1),
(8, '\"гродно\"', 8, 1),
(9, 'SELECT', 1, 2),
(10, 'name', 2, 2),
(11, 'FROM', 3, 2),
(12, 'workers', 4, 2),
(13, 'ORDER', 5, 2),
(14, 'BY', 6, 2),
(15, 'age', 7, 2),
(16, 'DESC', 8, 2),
(17, 'SELECT', 1, 3),
(18, 'DISTINCT', 2, 3),
(19, 'country', 3, 3),
(20, 'FROM', 4, 3),
(21, 'users', 5, 3),
(22, 'RENAME', 1, 4),
(41, 'SELECT', 1, 6),
(42, 'COUNT', 2, 6),
(43, '(*)', 3, 6),
(44, 'FROM', 4, 6),
(45, 'workers ', 5, 6),
(46, 'WHERE', 6, 6),
(47, 'age', 7, 6),
(48, '=', 8, 6),
(49, '32', 9, 6),
(50, 'TABLE', 2, 4),
(51, 'tovar', 3, 4),
(52, 'TO', 4, 4),
(53, 'products', 5, 4);

-- --------------------------------------------------------

--
-- Структура таблицы `books`
--

CREATE TABLE `books` (
  `id_book` int(11) NOT NULL,
  `book_link` varchar(150) COLLATE utf8mb4_unicode_ci NOT NULL,
  `book_img` varchar(150) COLLATE utf8mb4_unicode_ci NOT NULL,
  `book_name` varchar(150) COLLATE utf8mb4_unicode_ci NOT NULL,
  `book_info` varchar(150) COLLATE utf8mb4_unicode_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `books`
--

INSERT INTO `books` (`id_book`, `book_link`, `book_img`, `book_name`, `book_info`) VALUES
(1, 'https://drive.google.com/file/d/1Ufy8iTmAi4ns3Ch51IL0PbZYrdKKT4yY/preview', 'https://monster-book.com/sites/default/files/styles/sc290x400/public/books/bazy-dannyh-ozon.png?itok=3XJUl_AU', 'Базы данных. Проектирование, реализация и сопровождение', 'Автор: Томас Коннолли, Каролин Бегг<br> \r\nГод выхода: 2003<br>\r\nСтраниц: 49'),
(2, 'https://drive.google.com/file/d/1EN2Hz_kgqR8CRJ3tBQBUTEvrHKNDPTsd/preview', 'https://monster-book.com/sites/default/files/styles/sc290x400/public/books/postgresql.-osnovy-yazyka-sql.png?itok=wC7AvDFS', 'PostgreSQL. Основы языка SQL', 'Автор: Евгений Моргунов<br>\r\nГод выхода: 2018 <br>\r\nСтраниц: 337'),
(3, 'https://drive.google.com/file/d/10jWx-nvAMOQ-Ah6cEyq7O0Socln8kLEE/preview', 'https://monster-book.com/sites/default/files/styles/sc290x400/public/books/sem-baz-dannyh-za-sem-nedel.png?itok=ya6h1eRW', 'Семь баз данных за семь недель', 'Автор: Эрик Редмонд, Джим.Р.Уилсон<br>\r\nГод выхода: 2013 <br>\r\nСтраниц: 386'),
(4, 'https://drive.google.com/file/d/1CDKFRb526Cw-5_XSvreJEDm42UmPXCYE/preview\r\n', 'https://monster-book.com/sites/default/files/styles/sc290x400/public/books/sql-i-relyacionnaya-teoriya.png?itok=xiFIQZTA', 'SQL и реляционная теория', 'Автор: К. Дж. Дейт<br>\r\n Год выхода: 2010 <br>\r\nСтраниц: 476'),
(5, 'https://drive.google.com/file/d/1jn7O1T5PaS7kPSJmTDhsHN0ZtksNyDU8/preview', 'https://monster-book.com/sites/default/files/styles/sc290x400/public/books/sql.-sbornik-receptov.png?itok=MCap6c6Q', 'SQL. Сборник рецептов', 'Автор: Энтони Молинаро<br>\r\n Год выхода: 2009 <br>\r\nСтраниц: 668'),
(6, 'https://drive.google.com/file/d/1ROvI-VUzo_kW3deFDsoSLPoSmMpHK6U-/preview', 'https://monster-book.com/sites/default/files/styles/sc290x400/public/books/mysql-po-maksimumu.jpg?itok=OWCHVVT9', 'MySQL по максимуму', 'Автор: Бэрон Шварц, Вадим Ткаченко, Петр Зайцев<br>\r\n Год выхода: 2018 <br>\r\nСтраниц: 866'),
(7, 'https://drive.google.com/file/d/1loP_bJRBQfrALeui7gb87ZxwcUskOCTL/preview', 'https://monster-book.com/sites/default/files/styles/sc290x400/public/books/subd-dlya-programmista.png?itok=aJafn54i', 'СУБД для программиста. Базы данных изнутри', 'Автор: Сергей Тарасов<br>\r\n Год выхода: 2012 <br>\r\nСтраниц: 321'),
(8, 'https://drive.google.com/file/d/1GDmY1xSS7or27ql1gMWbB9ngXem5K6nz/preview', 'https://monster-book.com/sites/default/files/styles/sc290x400/public/books/microsoft-sql-server-vishnevskiy.png?itok=jopopS8E', 'Microsoft SQL Server. Эффективная работа', 'Автор: Алексей Вишневский<br>\r\n Год выхода: 2009 <br>\r\nСтраниц: 13'),
(9, 'https://drive.google.com/file/d/1m29JhUR-kxhEkKM4Fa6wygQZMAY7ATOW/preview', 'https://monster-book.com/sites/default/files/styles/sc290x400/public/books/sekrety-oracle-sql.png?itok=oc5w5f6L', 'Секреты Oracle SQL', 'Автор: Санжей Мишра, Алан Бьюли<br>\r\n Год выхода: 2003 <br>\r\nСтраниц: 30'),
(10, 'https://drive.google.com/file/d/1vt3sINAV-taKkiCQJLkFfFqPu2dI3Auu/preview', 'https://monster-book.com/sites/default/files/styles/sc290x400/public/books/postgresql-11-masterstvo-razrabotki.png?itok=K_vxyGmX', 'PostgreSQL 11. Мастерство разработки', 'Автор: Ганс-Юрген Шениг<br>\r\n Год выхода: 2019 <br>\r\nСтраниц: 363'),
(11, 'https://drive.google.com/file/d/14ZT_rHAzgvildHxdIU8M7I3qY1buk5sU/preview', 'https://monster-book.com/sites/default/files/styles/sc290x400/public/books/mongodb-v-deystvii.png?itok=__SDm3H0', 'MongoDB в действии', 'Автор: Кайл Бэнкер<br>\r\n Год выхода: 2012 <br>\r\nСтраниц: 395'),
(12, 'https://drive.google.com/file/d/1HPkjbVBcwFYqqxXklpW1WUYmwNEIa57p/preview', 'https://monster-book.com/sites/default/files/styles/sc290x400/public/books/oracle-dlya-professionalov.png?itok=PhT6IdyQ', 'Oracle для профессионалов', 'Автор: Томас Кайт, Кун Дарл<br>\r\n Год выхода: 2003 <br>\r\nСтраниц: 1427');

-- --------------------------------------------------------

--
-- Структура таблицы `example`
--

CREATE TABLE `example` (
  `example_id` int(11) NOT NULL,
  `title_example` int(11) NOT NULL,
  `example` varchar(200) NOT NULL,
  `otvet` varchar(200) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `example`
--

INSERT INTO `example` (`example_id`, `title_example`, `example`, `otvet`) VALUES
(1, 1, 'Найдите номер модели, скорость и размер жесткого диска для всех ПК стоимостью менее 500', 'SELECT model, speed, hd FROM PC WHERE price < 500'),
(2, 1, 'Найдите номер модели, объем памяти и размеры экранов ПК, цена которых превышает 1000', 'SELECT model,ram,screen FROM Laptop WHERE price > 1000'),
(3, 1, 'При выборке из таблицы workers создайте новое поле res, в котором будет число 3', 'SELECT 3 AS res FROM workers'),
(4, 1, 'Выберите из таблицы workers все записи так, чтобы туда попали только записи с разной зарплатой (без дублей)', 'SELECT DISTINCT salary FROM workers;'),
(5, 1, 'Извлечение из таблицы записи с полями  имя, должность, размер оклада и номер отдела для всех служащих за исключением продавцов из отдела с номером 30', 'SELECT ename, job, sal, deptno FROM emp WHERE NOT deptno = 30;'),
(6, 1, 'Вывести все рейтинги покупателей из Лондона равными NULL-значению', 'UPDATE Customers SET rating = NULL WHERE city = ‘London’;'),
(7, 1, 'Изменение для всех покупателей рейтинга на значение, равное 200', 'UPDATE Customers SET rating = 200;'),
(8, 1, 'Удалить из таблицы всех продавцов, у которых комиссионные меньше 100 у.е. в месяц', 'DELETE FROM emp WHERE JOB = ‘SALESMAN’ AND COMM < 100;'),
(9, 1, 'Вставка новой строки в таблицу table_name', 'INSERT INTO table_name VALUES (‘1′,’165′,’0′,’name’);'),
(10, 1, 'Копирует данные сотрудников фирмы, комисионные которых превышают 25% от дохода в таблицу bonus', 'INSERT INTO bonus SELECT ename, job, sal, comm FROM emp WHERE comm > 0.25 * sal;'),
(11, 4, 'Выберите из таблицы workers все записи, зарплата в которых больше средней зарплаты', 'SELECT * FROM workers WHERE salary >(SELECT AVG(salary) FROM workers);'),
(12, 4, 'Выберите из таблицы workers все записи, возраст в которых меньше среднего возраста, деленного на 2 и умноженного на 3', 'SELECT * FROM workers WHERE age < (SELECT AVG(age)/2*3 FROM workers)'),
(13, 4, 'Выберите из таблицы workers записи с минимальной зарплатой', 'SELECT * FROM workers WHERE salary = (SELECT MIN(salary) FROM workers)'),
(14, 4, 'Выберите из таблицы workers записи с максимальной зарплатой', 'SELECT * FROM workers WHERE salary = (SELECT MAX(salary) FROM workers) '),
(15, 4, 'При выборке из таблицы workers создайте новое поле avg, в котором будет лежать деленная на 2 разница между максимальным значением возраста и минимальным значением возраста в во всей таблице', 'SELECT (SELECT (MAX(age) - MIN(age))/2 FROM workers) AS avg'),
(16, 11, 'Выберите из таблицы workers записи c зарплатой от 100 до 1000', 'SELECT * FROM workers WHERE salary BETWEEN 100 AND 1500;'),
(17, 11, 'Выберите из таблицы workers записи c id от 3 до 10 и зарплатой от 300 до 500', 'SELECT * FROM workers WHERE id BETWEEN 3 AND 10 AND salary BETWEEN 100 AND 500;'),
(18, 11, 'Выберите из таблицы workers записи с id равным 1, 2, 3, 5, 14', 'SELECT * FROM workers WHERE id IN(1,2,3,5,14);'),
(19, 11, 'Вывести все поля из таблицы Customers, значения поля city которых НЕ равны NULL', 'SELECT * FROM Customers WHERE city IS NOT NULL;'),
(20, 11, 'Вывести все поля из талицы Customers, значения поля city которых равны NULL', 'SELECT * FROM Customers WHERE city IS NULL;'),
(21, 11, 'Выборка записи, где поле fname равно ‘Ivan’ и поле lname равно ‘Abrakov’.', 'SELECT * FROM table_name WHERE fname=’Ivan’ AND lname=’Abrakov’;'),
(22, 2, 'Создание новой таблицы', 'CREATE TABLE instructor (   ID CHAR(5),   name VARCHAR(20) NOT NULL,   dept_name VARCHAR(20),   salary NUMERIC(8,2),   PRIMARY KEY (ID),   FOREIGN KEY (dept_name) REFERENCES department(dept_name) ); '),
(23, 2, 'Переименуйте таблицу table2 в table3', 'RENAME TABLE table2 TO table3'),
(24, 2, 'Добавьте в таблицу table1 поле status', 'ALTER TABLE table1 ALTER COLUMN status;'),
(25, 2, 'Удалите из таблицы table1 поле age', 'ALTER TABLE table1 DROP COLUMN age ;'),
(26, 2, 'Переименуйте поле login на user_login', 'RENAME COLUMN login TO user_login;'),
(27, 2, 'Смените типа поля salary с int на varchar(255)', 'ALTER TABLE table1 CHANGE salary salary VARCHAR(255);'),
(28, 2, 'Удаление столбца таблицы', 'ALTER TABLE t1 DROP COLUMN pole1;'),
(29, 2, 'Изменение размера столбца таблицы', 'ALTER TABLE t1 MODIFY (pole1 char(20));'),
(30, 2, 'Необходимо установить проверку на существование таблицы при удалении', 'DROP TABLE IF EXISTS table;'),
(31, 10, 'Выберите из таблицы workers все записи, в которых сумма дня и месяца меньше 10-ти', 'SELECT (MONTH(date) + DAY(date)) FROM workers;'),
(32, 10, 'При выборке из таблицы workers запишите год, месяц и день в отдельные поля с помощью EXTRACT', 'SELECT EXTRACT(YEAR FROM date) AS year, EXTRACT(MONTH FROM date) AS month, EXTRACT(DAY FROM date) AS day FROM workers;'),
(33, 10, 'При выборке из таблицы workers прибавьте к дате 1 день', 'SELECT DATE_ADD(date, INTERVAL 1 DAY) FROM workers;'),
(34, 10, 'При выборке из таблицы workers отнимите от даты 1 день', 'SELECT DATE_ADD(date, INTERVAL \"1:2\" DAY_HOUR) FROM workers;'),
(35, 10, 'При выборке из таблицы workers прибавьте к дате 1 день и отнимите 2 часа', 'SELECT DATE_ADD(date, INTERVAL 1:-2 DAY_HOUR) FROM workers;'),
(36, 10, 'При выборке из таблицы workers прибавьте к дате 1 день, 2 часа, 3 минуты', 'SELECT DATE_SUB(date, INTERVAL \"1:2:3\" DAY_SECOND) FROM workers;'),
(37, 10, 'Выберите из таблицы workers все записи за 2016 год', 'SELECT * FROM workers WHERE YEAR(date) = 2016;'),
(38, 10, 'Выберите из таблицы workers все записи за март любого года', 'SELECT * FROM workers WHERE MONTH(date) = 3;'),
(39, 10, 'Выберите из таблицы workers все записи за третий день месяца', 'SELECT * FROM workers WHERE DAY(date) = 3'),
(40, 10, 'Выберите из таблицы workers все записи за следующие дни любого месяца: 1, 7, 11, 12, 15, 19, 21, 29', 'SELECT * FROM workers WHERE DAY(date) IN(1,7,11,12,15,19,21,29);'),
(41, 10, 'Выберите из таблицы workers все записи за вторник', 'SELECT * FROM workers WHERE DAYOFWEEK(date)= 3;'),
(42, 10, 'Выберите из таблицы workers все записи за первую декаду любого месяца 2016 года', 'SELECT * FROM workers WHERE DAY(date) <= 10 AND YEAR(date)= 2016;'),
(43, 10, 'При выборке из таблицы workers создайте новое поле today, в котором будет номер текущего дня недели', 'SELECT WEEKDAY(NOW()) as today FROM workers;'),
(44, 10, 'Выберите из таблицы workers все записи, у которых дата больше текущей', 'SELECT * FROM workers WHERE date>CURRENT_DATE();'),
(45, 5, 'При выборке из таблицы workers создайте новое поле max, в котором будет лежать максимальное значение зарплаты для возраста 25 лет', 'SELECT MAX(salary) AS max FROM workers WHERE age = 25;'),
(46, 5, 'При выборке из таблицы workers создайте новое поле res, в котором будет лежать сумма зарплаты и возраста', 'SELECT SUM(age) AND SUM(salary) AS res FROM workers;'),
(47, 5, 'При выборке из таблицы workers создайте новое поле res, в котором будет лежать разность зарплаты и возраста', 'SELECT (salary - age) AS res FROM workers;'),
(49, 5, 'При выборке из таблицы workers создайте новое поле res, в котором будет лежать среднее арифметическое зарплаты и возраста', 'SELECT ((salary * age)/2) AS res FROM workers;'),
(50, 5, 'Найдите в таблице workers средний возраст', 'SELECT AVG(age) FROM workers;'),
(51, 5, 'Найдите в таблице workers суммарную зарплату', 'SELECT SUM(salary) FROM workers;'),
(52, 5, 'Найдите в таблице workers суммарную зарплату для id, равного 1, 2, 3 и 5', 'SELECT SUM(salary) FROM workers WHERE id IN(1,2,3,5)'),
(53, 5, 'Найдите в таблице workers суммарную зарплату для людей в возрасте от 21 до 25', 'SELECT SUM(salary) FROM workers WHERE age BETWEEN 21 AND 25;'),
(54, 5, 'Найдите в таблице workers минимальную зарплату', 'SELECT MIN(salary) FROM workers'),
(55, 5, 'Напишем запрос, возвращающий количество записей столбца User_ID в таблице users, дата которых равна «20.05.2012»', 'SELECT COUNT(User_ID) FROM users WHERE date = «20.05.2012»;'),
(56, 5, 'Подсчитать количество зарплат, не равных NULL', 'SELECT COUNT(salary) as count FROM workers;'),
(57, 5, 'Подсчитать всех работников с возрастом 23 года', 'SELECT COUNT(*) as count FROM workers WHERE age=23;'),
(58, 9, 'При выборке из таблицы workers получите первые 5 символов поля description', 'SELECT LEFT(description, 5) FROM workers'),
(59, 9, 'При выборке из таблицы workers получите последние 5 символов поля description', 'SELECT RIGHT(description, 5) FROM workers;'),
(60, 9, 'При выборке из таблицы workers получите из поля description символы со второго по десятый', 'SELECT SUBSTRING(description, 2,10) FROM workers;'),
(61, 9, 'Получить три символа в названии корабля, начиная со второго символа', 'SELECT name, SUBSTRING(name, 2, 3)  FROM Ships;'),
(62, 9, 'Определить имена кораблей, которые начинаются и заканчиваются на одну и ту же букву', 'SELECT name  FROM Ships WHERE LEFT(name, 1) = RIGHT(name, 1);'),
(63, 9, 'Определить, сколько имеется разных букв, с которых начинаются названия кораблей в таблице Ships', 'SELECT COUNT(DISTINCT ASCII(name))  FROM Ships;'),
(64, 8, 'При выборке из таблицы workers создайте новое поле res, в котором будут лежать одновременно зарплата и возраст (слитно)', 'SELECT CONCAT(salary, age) AS res FROM workers'),
(65, 7, 'Найдите самые маленькие зарплаты по группам возрастов (для каждого возраста свою минимальную зарплат', 'SELECT MIN(salary), MAX(salary) FROM workers GROUP BY age'),
(66, 7, 'Найдите самый большой возраст по группам зарплат (для каждой зарплаты свой максимальный возраст)', 'SELECT MAX(age) FROM workers GROUP BY salary;'),
(67, 7, 'Выбрать для каждого покупаемого товара его код и общий объем покупок, за исключением покупок покупателя с кодом 23', 'SELECT stock,  SUM(quant)   FROM ordsale WHERE customerno<>23 GROUP BY stock;'),
(68, 7, 'Вычислить общий объем покупок для каждого товара', 'SELECT stock,  SUM(quant)   FROM ordsale GROUP BY stock;'),
(69, 7, 'Выбрать коды товаров, покупаемых более чем одним покупателем', 'SELECT stock FROM ordsale GROUP BY stock HAVING COUNT(*) > 1;'),
(70, 7, 'Получить значения минимального и максимального оклада для клерков каждого отдела, где  самое низкое жалованье составляет менее $1,000', 'SELECT deptno, MIN(sal), MAX(sal) FROM emp WHERE job = ‘CLERK’ GROUP BYdeptno HAVING MIN(sal) < 1000;'),
(71, 7, 'Выбрать коды товаров, покупаемых более чем одним покупателем', 'SELECT stock FROM ordsale GROUP BY stock HAVING COUNT(*) > 1;'),
(72, 7, 'Выведем список факультетов, у которых более одного курса', 'SELECT COUNT(course_id), dept_name   FROM course   GROUP BY dept_name   HAVING COUNT(course_id)>1;'),
(73, 3, 'Отмена привилегии CREATE TABLE на создание таблиц в базе данных у пользователя user', 'REVOKE CREATE TABLE FROM user;'),
(74, 3, 'Отмена привилегии SELECT на выборку записей из таблицы', 'REVOKE SELECT ON table_name FROM user;'),
(75, 3, 'Отмена привилегий UPDATE и DELETE на изменение и удаления записей', 'REVOKE UPDATE, DELETE ON table_name FROM user;'),
(76, 3, 'Отмена общих привилегий', 'REVOKE ALL ON table_name FROM user;'),
(77, 3, 'Если необходимо предоставить кому-то все полномочия на конкретный объект, используется ключевое слово ALL', 'GRANT ALL ON Student ТО Р2;'),
(78, 3, 'Пользователь Р1 является владельцем таблицы Student и нужно передать пользователю Р2 право на формулирование запросов к этой таблиц', 'GRANT SELECT ON Student TO P2;'),
(79, 6, 'Даны две таблицы: таблица category и таблица sub_category с полями id и name. Достаньте одним запросом названия категорий и подкатегорий', 'SELECT id, name FROM workers UNION SELECT id, name FROM sub_category'),
(80, 6, 'Выбрать из EMP записи по всем продавцам, и упорядочить результаты по размерам комиссионных в обратном порядке (убывающем порядке)', 'SELECT * FROM emp WHERE job = ‘SALESMAN’ ORDER BY comm DESC;'),
(81, 6, 'Выбрать из EMP записи по всем сотрудникам, и упорядочить результаты по размерам комиссионных в возрастающем порядке', 'SELECT * FROM emp WHERE job = ‘SALESMAN’ ORDER BY comm ASC;'),
(82, 6, 'Выбрать из EMP записи по служащим, упорядоченные сначала по возрастанию номера отдела а затем по убыванию размера оклада', 'SELECT ename, deptno, sal FROM emp ORDER BY deptno ASC, sal DESC;'),
(83, 6, 'Выберем коды товаров, которые имеют стоимость, превышающую 1000, либо покупаются покупателем с кодом 23 (либо то и другое)', 'SELECT stock FROM goods WHERE unitprice > 1000 UNION SELECT stock FROM ordsale WHERE customerno = 23;'),
(84, 1, 'Необходимо выбрать имена преподавателей, учебную группу и курс, на котором они преподают. Условием отбора должно являться одинаковое значение полей Учебная группа в таблицах Список и Группы.', 'SELECT DISTINCT группы.`Преподаватель` ,     список.`Учебная группа` , список.`курс`  FROM группы, список WHERE группы.`Учебная группа` = список.`Учебная группа`  AND курс <3'),
(85, 1, 'Вывести номера моделей компьютеров, имеющих одинаковые цены', 'SELECT DISTINCT A.Номер AS модель1, B.Номер AS модель2 FROM pc AS A, pc AS B WHERE A.Цена = B.Цена   AND A.Номер < B.Номер'),
(89, 1, 'Вывести все записи из таблицы actions с идентификатором 1234.', 'SELECT * FROM actions WHERE id=’1234′;'),
(90, 1, 'Вывести столбцы id, title, price, c_type с сортировкой по идентификатору в возрастающем порядке', 'SELECT id, title, price, c_type FROM ad_packages ORDER BY id ASC; '),
(91, 1, 'Получить из таблицы news одну новость с пометкой «Важные новости».', 'SELECT * FROM news WHERE status=’Важные новости’ LIMIT 1;'),
(92, 1, 'Вывести 30 комментариев начиная с 5 комментария из таблицы replies, кроме комментариев автора ‘Вася’. Данные сортируются по дате добавления комментария в убывающем порядке.', 'SELECT * FROM replies WHERE author!=’Вася’ ORDER BY date DESC LIMIT 5, 30;'),
(93, 1, 'Получить единым запросом список отделов и должностей предприятия.', 'SELECT pname FROM posts UNION SELECT dname FROM departments;');

-- --------------------------------------------------------

--
-- Структура таблицы `lab`
--

CREATE TABLE `lab` (
  `id_lab` int(5) NOT NULL,
  `name` varchar(50) COLLATE utf8mb4_unicode_ci NOT NULL,
  `link` varchar(200) COLLATE utf8mb4_unicode_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `lab`
--

INSERT INTO `lab` (`id_lab`, `name`, `link`) VALUES
(1, 'Лабораторная работа №1', 'https://drive.google.com/file/d/1EP0WVgp3uEkGwGq75eD4BAYKBeWp3-pY/view?usp=sharing'),
(3, 'Лабораторная работа №2', 'https://drive.google.com/file/d/1Q3BJTBP7ywG9YAcRcWa7RmX3CShCzUF6/view?usp=sharing'),
(4, 'Лабораторная работа №3', 'https://drive.google.com/file/d/1RrmpoYziWmYFK9JRfg48vOL6xDXHps2f/view?usp=sharing'),
(5, 'Лабораторная работа №4', 'https://drive.google.com/file/d/1hkpQVOWNMA0fPCaPem0TRFXM4OhKX8vo/view?usp=sharing'),
(6, 'Лабораторная работа №5', 'https://drive.google.com/file/d/1Od8pyba1TACaXzTHPelWaaRpj2I4z3Is/view?usp=sharing'),
(7, 'Лабораторная работа №6', 'https://drive.google.com/file/d/1kKvdOnqBS0vHWpxyM4IIcIVtJ_2znc5h/view?usp=sharing'),
(8, 'Лабораторная работа №7', 'https://drive.google.com/file/d/1Gb6r0zgywRiqob98GJW0RTKjGslDKSnY/view?usp=sharing'),
(9, 'Лабораторная работа №8', 'https://drive.google.com/file/d/1H1n3IerdfPuOjUzIFSLAYsbDluU4HnRY/view?usp=sharing'),
(10, 'Лабораторная работа №9', 'https://drive.google.com/file/d/1ML5GEbN8FW1Wx6uudoQdF091hoa5gjZi/view?usp=sharing'),
(11, 'Лабораторная работа №10', 'https://drive.google.com/file/d/1gxUwplOv2L8SFcgPs2ytDdWFja5Qzzuw/view?usp=sharing'),
(12, 'Лабораторная работа №11', 'https://drive.google.com/file/d/1wIPg2hQxVtXDwTsPPqqT6NrkCeZiBb1k/view?usp=sharing'),
(13, 'Лабораторная работа №12', 'https://drive.google.com/file/d/1G3bIIg07ExlPA-zkAn9dDVlFDrpaXZuL/view?usp=sharing'),
(14, 'Лабораторная работа №13', 'https://drive.google.com/file/d/1Gsm43pggHnCGNNRspDgW0Ebj37sjFC1T/view?usp=sharing'),
(15, 'Лабораторная работа №14', 'https://drive.google.com/file/d/1f-Znj8NLXbPdQoHiaL54J3oXaSFwbm0_/view?usp=sharing'),
(16, 'Лабораторная работа №15', 'https://drive.google.com/file/d/1-foBVnlRUOcJ_o4BBHG2VODbVDez5CX6/view?usp=sharing'),
(17, 'Лабораторная работа №16', 'https://drive.google.com/file/d/1F_Es1QCULzuP0u5qWg5IXYJOStcud5HB/view?usp=sharing'),
(18, 'Лабораторная работа №17', 'https://drive.google.com/file/d/1q3My2ILc8zyhtVBoffzJ4f6J3l1ujfHj/view?usp=sharing'),
(19, 'Лабораторная работа №18', 'https://drive.google.com/file/d/11P0eYMW4fhgyVP8qEcW861giEn7lhMJs/view?usp=sharing'),
(20, 'Лабораторная работа №19', 'https://drive.google.com/file/d/1uf2WVh1-jqj3DpPCK-D8NcUihhHOFFfr/view?usp=sharing\n'),
(21, 'Лабораторная работа №20', 'https://drive.google.com/file/d/1r-cGxI_yMQn-_8eaRjsPCLuOdh69DFRE/view?usp=sharing'),
(22, 'Лабораторная работа №21', 'https://drive.google.com/file/d/14GLbMv5-uCyj5_VtXJnACvQYXUiw0ZNw/preview'),
(23, 'Лабораторная работа №22', 'https://drive.google.com/file/d/1WZ172AIFYXt7D23__pQ6SKfsStcqnxbr/preview'),
(24, 'Лабораторная работа №23', 'https://drive.google.com/file/d/1UwzMAXehtHLsLh8Z5yFCDXn93o27qei9/preview'),
(25, 'Лабораторная работа №25', 'https://drive.google.com/file/d/15-rsw4ZoJH-i40Jwr0zgrpdwGvCY4rvP/preview'),
(30, 'Лабораторная работа №25', 'https://drive.google.com/file/d/15-rsw4ZoJH-i40Jwr0zgrpdwGvCY4rvP/preview');

-- --------------------------------------------------------

--
-- Структура таблицы `lectures`
--

CREATE TABLE `lectures` (
  `id_lectures` int(11) NOT NULL,
  `id_user_lectures` int(11) NOT NULL,
  `id_active_lectures` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `lectures`
--

INSERT INTO `lectures` (`id_lectures`, `id_user_lectures`, `id_active_lectures`) VALUES
(1, 7, 1);

-- --------------------------------------------------------

--
-- Структура таблицы `practice`
--

CREATE TABLE `practice` (
  `id_pract` int(11) NOT NULL,
  `title_practice` int(11) NOT NULL,
  `question` varchar(200) NOT NULL,
  `answer` varchar(80) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `practice`
--

INSERT INTO `practice` (`id_pract`, `title_practice`, `question`, `answer`) VALUES
(65, 1, 'Напишите команду, с которой начинается запрос на выборку информации в SQL. ', 'select'),
(66, 1, 'пример', 'запрос'),
(71, 2, 'GRDFTY', 'YTYTYT'),
(74, 4, 'fdfd', 'fdfdfdfd'),
(75, 4, 'rgrt', 'rtrtrtrtr'),
(76, 4, 'rtrtr', 'trtrtr'),
(79, 7, 'выбрать всех студентов', 'select * from student;'),
(80, 7, 'выбрать всех студентов из гродно', 'select * from student where citi=\"гродно\";');

-- --------------------------------------------------------

--
-- Структура таблицы `questions`
--

CREATE TABLE `questions` (
  `id` int(11) NOT NULL,
  `question` varchar(250) COLLATE utf8mb4_unicode_ci NOT NULL,
  `parent_test` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `questions`
--

INSERT INTO `questions` (`id`, `question`, `parent_test`) VALUES
(1, 'Как расшифровывается SQL?', 1),
(2, 'С какой обязательной командой всегда используется Select? ', 1),
(3, 'Для создания новой таблицы в существующей базе данных используют команду', 1),
(4, 'Что такое реляционные базы данных:', 2),
(5, 'Что позволяет различным приложениям и СУБД работать между собой понятным и непротиворечивым образом?', 2),
(6, 'Выберите корректный пример использования функции CONCAT:', 2),
(7, 'База данных- это:', 2),
(32, 'Информационная система-это ', 7),
(33, 'Разновидность информационной системы, в которой реализованы функции централизованного хранения и накопления обработанной информации организованной в одну или несколько баз данных это  ', 7),
(34, 'Совокупность специальным образом организованных данных, хранимых в памяти вычислительной системы и отображающих состояние объектов и их взаимосвязей в рассматриваемой предметной области - это  ', 7),
(35, 'Комплекс языковых и программных средств, предназначенный для создания, ведения и совместного использования БД многими пользователями - это  ', 7),
(36, 'Совокупность взаимосвязанных и согласованно действующих ЭВМ или процессов и других устройств, обеспечивающих автоматизацию процессов приема, обработки и выдачи информации потребителям - это ', 7),
(37, 'Модель представления данных - это ', 7),
(38, 'Наиболее используемая (в большинстве  БД) модель данных ', 7),
(39, 'Реляционная модель представления данных - данные для пользователя передаются в виде ', 7),
(40, 'Сетевая модель представления данных  - данные представлены с помощью ', 7),
(41, 'Иерархическая модель представления данных - данные представлены в виде ', 7),
(42, 'Принципы реляционной модели представления данных заложил', 7),
(43, 'Отношением называют ', 7),
(44, 'Кортеж отношения - это ', 7),
(45, 'Атрибут отношения - это  ', 7),
(46, 'Домен - это', 7),
(47, 'Один атрибут или минимальный набор из нескольких атрибутов, значения которых в одно и тоже время не бывают одинаковыми, то есть однозначно определяют запись таблицы - это ', 7),
(48, 'Средство ускорения операции поиска записей в таблице, а, следовательно, и других операций использующих поиск называется ', 7),
(49, 'Таблица называется индексированной, если для неё используется ', 7),
(50, 'Процедура создания свертки исходного значения ключевого поля называется ', 7),
(51, 'Набор отношений, связанных между собой, что обеспечивает возможность поиска одних кортежей по значению других, называется  ', 7),
(52, 'Выберите соответствующий вид связи, если в каждый момент времени каждому элементу (кортежу) отношения А соответствует 0 или 1 кортеж отношения В ', 7),
(53, 'Выберите соответствующий вид связи, если в каждый момент времени множеству кортежей отношения А соответствует один кортеж отношения В.  ', 7),
(54, 'Выберите соответствующий вид связи, если в каждый момент времени единственному кортежу отношения А соответствует несколько кортежей отношения В. ', 7),
(55, ') Выберите из предложенных примеров тот, который между указанными отношениями иллюстрирует связь 1 :М ', 7),
(56, 'Выберите из предложенных примеров тот, который между указанными отношениями иллюстрирует связь М: 1', 7),
(57, 'Столбец или группа столбцов таблицы, значения которых совпадают со значениями первичного ключа другой таблицы называют', 7),
(58, 'Группа процедурных языков для выполнения операций над отношениями с помощью реляционных операторов, где результатом всех действий являются отношения называется ', 7),
(59, 'Примером языка реляционного исчисления является язык ', 7),
(60, 'Операция формирования нового отношения, включающего только те кортежи первоначального отношения, которые удовлетворяют некоторому условию, называется ', 7),
(61, 'Операция формирования нового отношения К, содержащего все элементы исходных отношений  К1 и К2 (без повторений) одинаковой размерности, называется ', 7),
(62, 'Операция формирования нового отношения К, содержащего множество кортежей, принадлежащих К1, но не принадлежащих К2,причем К1 и К2 одинаковой размерности, называется ', 7),
(63, 'Операция формирования нового отношения К степени к1+к2, содержащего все возможные сочетания кортежей отношений К1 степени к1 и К2 степени к2, называется ', 7),
(64, 'Выберите вариант, который  является названием типа данных ', 7),
(68, 'Основными составными частями клиент - серверной архитектуры являются', 9),
(69, 'Собственно СУБД и управление хранением данных, доступом, защитой, резервным копированием, отслеживанием целостности данных, выполнением запросов клиентов - это', 9),
(70, 'Различные приложения пользователей, которые формируют запросы к серверу, проверяют допустимость данных и получают ответы - это  ', 9),
(71, 'Контроль завершения транзакций - это задачи СУБД по контролю и предупреждению ', 9),
(72, 'Контроль завершения транзакций реализуется при помощи', 9),
(73, 'Хранимые процедуры – это', 9),
(74, 'Средство ускорения операции поиска записей в таблице, а, следовательно, и других операций использующих поиск называется', 9),
(75, 'Таблица называется индексированной, если для неё используется ', 9),
(76, 'Сколько внешних ключей может содержать таблица? ', 9),
(77, 'Назовите оператор языка SQL для создания запросов на выбор данных', 9),
(78, 'Назовите оператор команды Select, который обеспечивает возможность устранения избыточных значений.', 9),
(79, 'Назовите предложение команды Select, которая позволяет производить выборку данных, в зависимости от истинности поставленного условия.', 9),
(80, 'Назовите команду, которая определяет группу значений в поле в терминах другого поля и применяет к ней агрегатную функцию.', 9),
(81, 'Какая инструкция отменяет выполнение текущей транзакции и возвращает БД в состояние начала транзакции?', 9),
(82, 'Изменение ранее созданной таблицы осуществляется оператором', 9),
(83, 'Язык программирования php нашел наиболее широкое применение в:', 10),
(87, 'Как расшифровывается аббревиатура PHP?', 10),
(88, 'Что понимается под целостностью БД?', 12),
(89, 'Как называется неделимая с точки зрения воздействия на БД последовательность операторов манипулирования данными?', 12),
(90, 'Какая инструкция отменяет выполнение текущей транзакции и возвращает БД в состояние начала транзакции?', 12),
(91, 'Как называется операция, когда все изменения данных, осуществленные в процессе выполнения транзакции не могут быть потеряны?', 12),
(92, 'Как называется операция транзакции, когда образуется неразделимый блок с определенным началом и концом?', 12),
(94, 'Что применяется для обеспечения сериализации?', 12),
(97, 'Среди перечисленных свойств выберите те, которые не могут являться свойствами отношений:    ', 13),
(98, 'Операция формирования нового отношения К, содержащего все элементы исходных отношений  К1 и К2 (без повторений) одинаковой размерности, называется ', 13),
(99, 'Операция формирования нового отношения К степени к1+к2, содержащего все возможные сочетания кортежей отношений К1 степени к1 и К2 степени к2, называется ', 13),
(100, 'Столбец или группа столбцов таблицы, значения которых совпадают со значениями первичного ключа другой таблицы называют', 13),
(101, 'Информационная система-это ...', 13),
(102, 'Разновидность информационной системы, в которой реализованы функции централизованного хранения и накопления обработанной информации организованной в одну или несколько баз данных это  ...', 13),
(103, 'Совокупность специальным образом организованных данных, хранимых в памяти вычислительной системы и отображающих состояние объектов и их взаимосвязей в рассматриваемой предметной области - это  ...', 13),
(104, 'Комплекс языковых и программных средств, предназначенный для создания, ведения и совместного использования БД многими пользователями - это  ...', 13),
(105, 'Наиболее используемая (в большинстве  БД) модель данных ', 13),
(106, 'Реляционная модель представления данных - данные для пользователя передаются в виде ', 13),
(107, 'Сетевая модель представления данных  - данные представлены с помощью ', 13),
(108, 'Иерархическая модель представления данных - данные представлены в виде ', 13),
(109, 'Принципы реляционной модели представления данных заложил ', 13),
(110, 'Отношением называют ', 13),
(111, 'Кортеж отношения - это ', 13),
(112, 'Кортеж отношения - это ', 13),
(113, 'Атрибут отношения - это  ', 13),
(114, 'Домен - это', 13),
(115, 'Один атрибут или минимальный набор из нескольких атрибутов, значения которых в одно и тоже время не бывают одинаковыми, то есть однозначно определяют запись таблицы - это ', 13),
(116, 'Выберите соответствующий вид связи, если в каждый момент времени каждому элементу (кортежу) отношения А соответствует 0 или 1 кортеж отношения В ', 13),
(117, 'Выберите соответствующий вид связи, если в каждый момент времени множеству кортежей отношения А соответствует один кортеж отношения В', 13),
(118, 'Выберите из предложенных примеров тот, который между указанными отношениями иллюстрирует связь 1 :М ', 13),
(119, 'Группа процедурных языков для выполнения операций над отношениями с помощью реляционных операторов, где результатом всех действий являются отношения называется ', 13),
(120, 'Операция формирования нового отношения, включающего только те кортежи первоначального отношения, которые удовлетворяют некоторому условию, называется ', 13),
(121, 'Свойство реляционной БД, заключающееся в  отсутствии внешних ключей ссылающихся на несуществующие кортежи', 13),
(122, 'Ключ называется составным, если состоит', 13),
(123, 'Наиболее распространенным подходом к физическому хранению отношений является...', 14),
(126, 'Каким свойством должны обладать индексы?', 14),
(127, 'Что является показателем уровня развитости СУБД?', 14),
(128, 'Механизм выполнения транзакций по некоторому сериальному плану называется...', 14),
(129, 'Для выполнения восстановлений согласованного состояния БД необходима дополнительная информация, которая поддерживается в виде...', 14),
(130, 'Восстановление после внезапной потери содержимого оперативной памяти называется...', 14),
(131, 'Что является основой восстановления после жесткого сбоя?', 14),
(132, 'Основой восстановления состояния БД является...', 14),
(133, 'Неделимая, с точки зрения воздействия на БД, последовательность операторов манипулирования данными  это...', 14),
(134, 'Откат транзакции происходит при завершении ее оператором...', 14),
(135, 'Восстановление после поломки основного внешнего носителя БД называется', 14),
(136, 'Что такое реляционные базы данных:', 15),
(137, 'Как выглядит запрос, для вывода ВСЕХ значений из таблицы Orders:', 15),
(138, 'Какие данные мы получим из этого запроса?<br>select id, date, customer_name from Orders;', 15),
(140, 'Что не так с этим запросом select id, date from Orders where seller_id = NULL;', 15),
(141, 'Что покажет следующий запрос: select DISTINCT seller_id order by seller_id from Orders;', 15),
(142, 'Выберите корректный пример использования функции CONCAT:', 15),
(143, 'Для чего используется LIMIT: select * from Orders limit 10;', 15),
(144, 'Что такое агрегирующие функции:', 15),
(145, 'Возможно ли использование одновременно двух агрегирующих функций: select min(price), max(price) from Orders;', 15),
(146, 'Что покажет следующий запрос: select seller_id, count(*) from Orders GROUP BY seller_id HAVING seller_id IN (2,4,6);', 15),
(147, 'Что такое JOIN:', 15),
(148, 'Выберите корректный пример составленного запроса с использованием JOIN. Данный запрос выведет нам данные ID заказа, имя заказчика и продавца:', 15),
(149, 'Чем отличается CHAR и VARCHAR?', 15),
(150, 'Как правильно добавить строку в таблицу? Какой запрос верный?', 15),
(151, 'Как сделать несколько записей в таблицу за один запрос?', 15),
(152, 'Зачем существует команда UPDATE, если можно сначала удалить запись, а потом добавить новую, исправленную.', 15),
(153, 'Как можно заранее узнать, какие записи будут удалены при выполнении DELETE?', 15),
(154, 'Какой командой можно создать новую таблицу?', 15),
(155, 'Можно ли поменять тип данных поля в уже существующей таблице?', 15),
(158, 'Есть ли ошибка в запросе?select id, date, customer_name from Orders where customer_name = Mike;', 15),
(159, 'Запрос для выборки всех значений из таблицы «Persons» имеет вид:', 1),
(160, 'Какое выражение используется для возврата только разных значений?', 1),
(161, 'Для подсчета количества записей в таблице «Persons» используется команда:', 1),
(162, 'Запрос «SELECT name ___ Employees WHERE age ___ 35 AND 50» возвращает имена работников, возраст которых от 35 до 50 лет. Заполните пропущенные места в запросе.', 1),
(163, 'Запрос для выборки первых 14 записей из таблицы «Users» имеет вид:', 1),
(164, 'Заполните пробелы в запросе «SELECT ___, Сountry FROM ___ », который возвращает имена заказчиков и страны, где они находятся, из таблицы «Customers».', 1),
(165, 'Запрос, возвращающий все значения из таблицы «Countries», за исключением страны с ID=8, имеет вид:', 1),
(166, 'Какая функция позволяет преобразовать все буквы в выбранном столбце в верхний регистр?', 1),
(167, 'В таблице «Emlpoyees» содержатся данные об именах, фамилиях и зарплате сотрудников. Напишите запрос, который изменит значение зарплаты с 2000 на 2500 для сотрудника с ID=7.', 1),
(168, 'К какому результату приведет выполнение запроса DROP DATABASE Users?', 1),
(169, 'Для чего в SQL используются aliases?', 1),
(170, 'Какие операторы являются основными при модификации данных с помощью SQL? ', 1),
(171, 'Оператор Union позволяет: ', 1),
(172, 'Какие операторы являются основными при создании и удалении таблиц с помощью SQL? ', 1),
(173, 'Укажите оператор, который используется  для сортировки по убыванию. ', 1),
(175, 'Какой тип значения будет в переменной $a после выполнения кода $a = \'123\';?', 10),
(176, 'В выражении “$a=2; $b=$a++;” чему равно значение $b?', 10),
(177, 'Расставьте слова (1) echo (2) “Robert” (3) $name= (4) $name в таком порядке, чтобы на экран выводилось имя, переданное переменной name.  ', 10),
(178, 'Для чего используется ключевое слово global?', 10),
(179, 'Какой тип данных следует использовать для выражения “-42”?', 10),
(180, 'Вызов функции из самой себя – это:', 10),
(181, 'Каждый php-оператор должен заканчиваться:', 10),
(182, 'Укажите оператор, написанный на языке php, который делал бы файл \"filename.txt\" доступным для чтения.', 10),
(183, 'Как правильно записать добавление 1 (единицы) к переменной $count?', 10),
(184, 'Укажите неверно заданное имя:', 10),
(185, 'В php используется … типизация данных.', 10),
(186, 'Перечислите основные типы данных в php:', 10),
(187, 'К какому языку программирования синтаксически наиболее близок php?', 10),
(188, 'С какого символа начинаются все переменные в php?', 10),
(189, 'Укажите код, результатом выполнения которого является вывод на экран имени (переменная “name”).', 10),
(190, 'Что отобразит браузер при исполнении следующего кода:<BR>\r\n$array[0] = \"the mall\";<BR>\r\n$array[1] = \"David\";<BR>\r\n$array[2] = \"brother\";<BR>\r\n$array[3] = \"the store\";<BR>\r\n$array[4] = \"Rob\";<BR>\r\necho \"$array[1] went to $array[3]\";?\r\n', 10);

-- --------------------------------------------------------

--
-- Структура таблицы `questions_practice3`
--

CREATE TABLE `questions_practice3` (
  `id` int(11) NOT NULL,
  `qustion_pract3` varchar(200) COLLATE utf8mb4_unicode_ci NOT NULL,
  `parent_name_pract3` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `questions_practice3`
--

INSERT INTO `questions_practice3` (`id`, `qustion_pract3`, `parent_name_pract3`) VALUES
(1, 'Выбрать всех студентов из гродно', 1),
(2, 'Получить имена из таблицы workers и отсортировать их по убыванию возраста', 1),
(3, 'Вывести  только список встречающихся значений  из таблицы users по полю country', 1),
(4, 'Переименуйте таблицу tovar в products', 2),
(6, 'Подсчитать всех работников с возрастом 32 года', 3);

-- --------------------------------------------------------

--
-- Структура таблицы `result`
--

CREATE TABLE `result` (
  `id_result` int(11) NOT NULL,
  `id_user` int(11) NOT NULL,
  `type` varchar(40) COLLATE utf8mb4_unicode_ci NOT NULL,
  `nazv_zadan` varchar(250) COLLATE utf8mb4_unicode_ci NOT NULL,
  `mark` int(2) NOT NULL,
  `date` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `result`
--

INSERT INTO `result` (`id_result`, `id_user`, `type`, `nazv_zadan`, `mark`, `date`) VALUES
(24, 3, 'Тест', 'Тест на знание SQL', 7, '22.12.2020  22:57 '),
(25, 3, 'Тест', 'Основы Баз Данных', 8, '22.12.2020  22:58 '),
(26, 3, 'Тест', 'Тест по разделу 1', 2, '22.12.2020  22:59 '),
(27, 7, 'Тест', 'Тест по разделу 1', 2, '22.12.2020  23:00 '),
(28, 7, 'Тест', 'Тест на знание SQL', 10, '22.12.2020  23:01 '),
(29, 4, 'Тест', 'Тест на знание SQL', 7, '22.12.2020  23:01 '),
(30, 4, 'Тест', 'Тест по разделу 1', 2, '22.12.2020  23:02 '),
(31, 4, 'Тест', 'Основы Баз Данных', 5, '22.12.2020  23:18 '),
(32, 6, 'Тест', 'Тест по разделу 1', 3, '23.12.2020  02:55 '),
(33, 6, 'Тест', 'Тест на знание SQL', 7, '23.12.2020  02:56 '),
(34, 4, 'Тест', 'Тест по разделу 4', 1, '23.12.2020  21:43 '),
(36, 37, 'Тест', 'Тест на знание SQL', 7, '28.12.2020  18:13 '),
(38, 4, 'Тест', 'Тест по разделу 6 ', 10, '31.12.2020  11:54 '),
(43, 38, 'Тест', 'Тест на знание SQL', 7, '02.01.2121  23:14 '),
(44, 38, 'Тест', 'Основы Баз Данных', 5, '02.01.2121  23:18 '),
(45, 39, 'Тест', 'Тест по разделу 4', 5, '05.01.2121  15:15 '),
(46, 39, 'Тест', 'Тест по разделу 6', 5, '05.01.2121  21:22 '),
(47, 39, 'Тест', 'Тест по теме \"Внутренняя организация реляционных СУБД\"', 5, '07.01.2121  17:09 '),
(48, 39, 'Тест', 'Тест по теме «Транзакции»', 10, '07.01.2121  19:41 ');

-- --------------------------------------------------------

--
-- Структура таблицы `test`
--

CREATE TABLE `test` (
  `id` int(11) NOT NULL,
  `test_name` varchar(250) COLLATE utf8mb4_unicode_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `test`
--

INSERT INTO `test` (`id`, `test_name`) VALUES
(1, 'Тест по SQL'),
(2, 'Основы Баз Данных'),
(7, 'Тест по разделу 1'),
(9, 'Тест по разделу 4'),
(10, 'Тест по разделу 6'),
(12, 'Тест по теме «Транзакции»'),
(13, 'Тест по разделу «Основные концепции данных и реляционная модель данных»'),
(14, 'Тест по теме «Внутренняя организация реляционных СУБД»'),
(15, 'Тест «Основные понятия БД»');

-- --------------------------------------------------------

--
-- Структура таблицы `title_example`
--

CREATE TABLE `title_example` (
  `id_title` int(11) NOT NULL,
  `name_example` varchar(50) COLLATE utf8mb4_unicode_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `title_example`
--

INSERT INTO `title_example` (`id_title`, `name_example`) VALUES
(1, 'Команды DML'),
(2, 'Команды DDL'),
(3, 'Команды DCL'),
(4, 'Подзапросы'),
(5, 'Агрегирующие функции'),
(6, 'Оператор ORDER BY'),
(7, 'Оператор GROUP BY'),
(8, 'Оператор CONCAT'),
(9, 'Строковые функции'),
(10, 'Запросы на дату'),
(11, 'Логические операторы');

-- --------------------------------------------------------

--
-- Структура таблицы `title_lectures`
--

CREATE TABLE `title_lectures` (
  `id_title_lectures` int(11) NOT NULL,
  `name_lectures` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `title_lectures`
--

INSERT INTO `title_lectures` (`id_title_lectures`, `name_lectures`) VALUES
(1, 'Введение в системы баз данных'),
(2, 'Типовая организация современной СУБД'),
(3, 'Ранние подходы к организации СУБД'),
(4, 'Общие понятия реляционного подхода к организации баз данных. Основные концепции и термины'),
(5, 'Базисные средства манипулирования реляционными данными'),
(6, 'Проектирование реляционных баз данных с использованием нормализации'),
(7, 'Структуры внешней памяти, методы организации индексов'),
(8, 'Управление транзакциями'),
(9, 'Cериализация транзакций'),
(10, 'Журнализация изменений БД'),
(11, 'Функции и основные возможности языка SQL'),
(12, 'Выборка данных с использованием предложения SELECT'),
(13, 'Вложенные подзапросы'),
(14, 'Манипулирование данными'),
(15, 'Основные особенности архитектуры клиент-сервер'),
(16, 'Описание данных на основе SQL'),
(17, 'Триггеры и хранимые процедуры'),
(18, 'Работа с BLOB и функции, определенные пользователем'),
(19, 'Транзакции. Механизм транзакций'),
(20, 'Этапы создания приложения'),
(21, 'Описание интерфейса среды и ее компоненты для работы с клиент-серверной БД'),
(22, 'Компоненты доступа к данным и визуальные компоненты'),
(23, 'Общие особенности технологии dbExpress'),
(24, 'Технология dbExpress. Использование процедур при разработке приложений'),
(25, 'Технология доступа к данным с использованием процедур'),
(26, 'Основные особенности технологии доступа к данным ADO'),
(27, 'Основы языка PHP. Конфигурация'),
(28, 'Инструментальные средства разработки'),
(29, 'Получение данных. Поддержка нескольких соединений'),
(30, 'Функции PHP для работы с СУБД'),
(31, 'Способы интерактивного редактирования данных'),
(32, 'Введение в трехзвенную архитектуру'),
(33, 'Сервер приложений. Технологии удаленного доступа'),
(34, 'Клиентское приложение. Виды связи. Управление связью');

-- --------------------------------------------------------

--
-- Структура таблицы `title_practice`
--

CREATE TABLE `title_practice` (
  `id_title_practice` int(11) NOT NULL,
  `name_practice` varchar(50) COLLATE utf8mb4_unicode_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `title_practice`
--

INSERT INTO `title_practice` (`id_title_practice`, `name_practice`) VALUES
(1, 'Практическая работа №1'),
(2, 'Практическая работа №2'),
(4, 'Практическая работа №3'),
(7, 'Практическая работа №4');

-- --------------------------------------------------------

--
-- Структура таблицы `title_practice3`
--

CREATE TABLE `title_practice3` (
  `id_practice3` int(11) NOT NULL,
  `name_practice3` varchar(150) COLLATE utf8mb4_unicode_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `title_practice3`
--

INSERT INTO `title_practice3` (`id_practice3`, `name_practice3`) VALUES
(1, 'Практическая работа №1'),
(2, 'Практическая работа №2'),
(3, 'Практическая работа №3');

-- --------------------------------------------------------

--
-- Структура таблицы `user`
--

CREATE TABLE `user` (
  `user_id` int(11) NOT NULL,
  `login` varchar(30) COLLATE utf8mb4_unicode_ci NOT NULL,
  `group` varchar(6) COLLATE utf8mb4_unicode_ci NOT NULL,
  `e_mail` varchar(40) COLLATE utf8mb4_unicode_ci NOT NULL,
  `password` varchar(32) COLLATE utf8mb4_unicode_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `user`
--

INSERT INTO `user` (`user_id`, `login`, `group`, `e_mail`, `password`) VALUES
(1, 'adminadmin', '', 'adminadmin@mail.ru', 'ec15d79e36e14dd258cfff3d48b73d35'),
(3, 'Стома Михаил', '30тп', 'stoma@mail.ru', 'e1589045f27f37358283b57e7adf5d86'),
(4, 'Яцук Валерия', '30тп', 'yatsuk@mail.ru', '61dde151fa391c68a29e9a3cc4a18d58'),
(6, 'Рожко Егор', '30тп', 'pomidor@mail.ru', 'ae2433ae71592d77086e7133e87ac1f8'),
(7, 'Ковальчук Полина', '30тп', 'polina@mail.ru', 'd447469c457d5f9f108cc30f61cf5a94'),
(8, 'Макеев Максим', '30тп', 'maxim@mail.ru', '94cdc2c6e37b33a0360dc21a7034468c'),
(9, 'Кривущенко Никита', '30тп', 'nikita@mail.ru', '9e1c23cbc414f13ab68f8bd88207bd3b'),
(10, 'Кудака Артемий', '30тп', 'kudaka@mail.ru', 'a2130d5839c8b3449f8115fa87059085'),
(11, 'Козич Илья', '30тп', 'kozic@mail.ru', '4930819960bf5d8544448a31a7af3523'),
(20, 'сссс', 'сссс', 'сссс@mail.ru', '8cc6185088fd053ca3e5ba2ac1f932dc'),
(24, 'bbbbt', 'bbbb', 'bbbb@mail.ru', 'b0a679aff965ea7c38d4b7cd31df7c02'),
(29, 'hghhgh', 'hghhgh', 'hghhgh@mail.ru', 'c4dfad2c49dc4f244bcddbe32a3ee0ef'),
(34, 'ffff', 'ffff', 'ffff@mail.ru', '24c6c20de8f9892b6664b719c151fa5d'),
(36, 'Рожко Егор-Помидор', '30тп', 'rспвапвапвr@mail.ru', '0fec0ab2297f46fa8368d31a451dc7bf'),
(37, 'Серов Дмитрий', '30тп', '333@mail.ru', 'c866f55328094eeadb393eecac39a75c'),
(38, 'bbbb', 'nnnn', 'nnnn@mail.ru', 'e8d344100e2aef72985170621f6891f4'),
(39, 'xxxx', 'xxxx', 'xxxx@mail.ru', '158628947fbce166f115f1cff1f3a5dc');

--
-- Индексы сохранённых таблиц
--

--
-- Индексы таблицы `answers`
--
ALTER TABLE `answers`
  ADD PRIMARY KEY (`id`),
  ADD KEY `parent_question` (`parent_question`);

--
-- Индексы таблицы `answers_practice3`
--
ALTER TABLE `answers_practice3`
  ADD PRIMARY KEY (`id`),
  ADD KEY `parent_quest` (`parent_quest`);

--
-- Индексы таблицы `books`
--
ALTER TABLE `books`
  ADD PRIMARY KEY (`id_book`);

--
-- Индексы таблицы `example`
--
ALTER TABLE `example`
  ADD PRIMARY KEY (`example_id`),
  ADD KEY `title_example` (`title_example`);

--
-- Индексы таблицы `lab`
--
ALTER TABLE `lab`
  ADD PRIMARY KEY (`id_lab`);

--
-- Индексы таблицы `lectures`
--
ALTER TABLE `lectures`
  ADD PRIMARY KEY (`id_lectures`),
  ADD KEY `id_user_lectures` (`id_user_lectures`),
  ADD KEY `id_active_lectures` (`id_active_lectures`);

--
-- Индексы таблицы `practice`
--
ALTER TABLE `practice`
  ADD PRIMARY KEY (`id_pract`),
  ADD KEY `title_practice` (`title_practice`);

--
-- Индексы таблицы `questions`
--
ALTER TABLE `questions`
  ADD PRIMARY KEY (`id`),
  ADD KEY `perent_test` (`parent_test`);

--
-- Индексы таблицы `questions_practice3`
--
ALTER TABLE `questions_practice3`
  ADD PRIMARY KEY (`id`),
  ADD KEY `parent_name_pract3` (`parent_name_pract3`);

--
-- Индексы таблицы `result`
--
ALTER TABLE `result`
  ADD PRIMARY KEY (`id_result`),
  ADD KEY `id_user` (`id_user`);

--
-- Индексы таблицы `test`
--
ALTER TABLE `test`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `title_example`
--
ALTER TABLE `title_example`
  ADD PRIMARY KEY (`id_title`);

--
-- Индексы таблицы `title_lectures`
--
ALTER TABLE `title_lectures`
  ADD PRIMARY KEY (`id_title_lectures`);

--
-- Индексы таблицы `title_practice`
--
ALTER TABLE `title_practice`
  ADD PRIMARY KEY (`id_title_practice`);

--
-- Индексы таблицы `title_practice3`
--
ALTER TABLE `title_practice3`
  ADD PRIMARY KEY (`id_practice3`);

--
-- Индексы таблицы `user`
--
ALTER TABLE `user`
  ADD PRIMARY KEY (`user_id`);

--
-- AUTO_INCREMENT для сохранённых таблиц
--

--
-- AUTO_INCREMENT для таблицы `answers`
--
ALTER TABLE `answers`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=881;

--
-- AUTO_INCREMENT для таблицы `answers_practice3`
--
ALTER TABLE `answers_practice3`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=67;

--
-- AUTO_INCREMENT для таблицы `books`
--
ALTER TABLE `books`
  MODIFY `id_book` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=13;

--
-- AUTO_INCREMENT для таблицы `example`
--
ALTER TABLE `example`
  MODIFY `example_id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=94;

--
-- AUTO_INCREMENT для таблицы `lab`
--
ALTER TABLE `lab`
  MODIFY `id_lab` int(5) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=31;

--
-- AUTO_INCREMENT для таблицы `lectures`
--
ALTER TABLE `lectures`
  MODIFY `id_lectures` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;

--
-- AUTO_INCREMENT для таблицы `practice`
--
ALTER TABLE `practice`
  MODIFY `id_pract` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=82;

--
-- AUTO_INCREMENT для таблицы `questions`
--
ALTER TABLE `questions`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=191;

--
-- AUTO_INCREMENT для таблицы `questions_practice3`
--
ALTER TABLE `questions_practice3`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=14;

--
-- AUTO_INCREMENT для таблицы `result`
--
ALTER TABLE `result`
  MODIFY `id_result` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=49;

--
-- AUTO_INCREMENT для таблицы `test`
--
ALTER TABLE `test`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=22;

--
-- AUTO_INCREMENT для таблицы `title_example`
--
ALTER TABLE `title_example`
  MODIFY `id_title` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=22;

--
-- AUTO_INCREMENT для таблицы `title_lectures`
--
ALTER TABLE `title_lectures`
  MODIFY `id_title_lectures` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=35;

--
-- AUTO_INCREMENT для таблицы `title_practice`
--
ALTER TABLE `title_practice`
  MODIFY `id_title_practice` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=9;

--
-- AUTO_INCREMENT для таблицы `title_practice3`
--
ALTER TABLE `title_practice3`
  MODIFY `id_practice3` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=4;

--
-- AUTO_INCREMENT для таблицы `user`
--
ALTER TABLE `user`
  MODIFY `user_id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=40;

--
-- Ограничения внешнего ключа сохраненных таблиц
--

--
-- Ограничения внешнего ключа таблицы `answers`
--
ALTER TABLE `answers`
  ADD CONSTRAINT `answers_ibfk_1` FOREIGN KEY (`parent_question`) REFERENCES `questions` (`id`) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Ограничения внешнего ключа таблицы `answers_practice3`
--
ALTER TABLE `answers_practice3`
  ADD CONSTRAINT `answers_practice3_ibfk_1` FOREIGN KEY (`parent_quest`) REFERENCES `questions_practice3` (`id`) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Ограничения внешнего ключа таблицы `example`
--
ALTER TABLE `example`
  ADD CONSTRAINT `example_ibfk_1` FOREIGN KEY (`title_example`) REFERENCES `title_example` (`id_title`) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Ограничения внешнего ключа таблицы `lectures`
--
ALTER TABLE `lectures`
  ADD CONSTRAINT `lectures_ibfk_1` FOREIGN KEY (`id_active_lectures`) REFERENCES `title_lectures` (`id_title_lectures`) ON DELETE CASCADE ON UPDATE CASCADE,
  ADD CONSTRAINT `lectures_ibfk_2` FOREIGN KEY (`id_user_lectures`) REFERENCES `user` (`user_id`) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Ограничения внешнего ключа таблицы `practice`
--
ALTER TABLE `practice`
  ADD CONSTRAINT `practice_ibfk_1` FOREIGN KEY (`title_practice`) REFERENCES `title_practice` (`id_title_practice`) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Ограничения внешнего ключа таблицы `questions`
--
ALTER TABLE `questions`
  ADD CONSTRAINT `questions_ibfk_1` FOREIGN KEY (`parent_test`) REFERENCES `test` (`id`) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Ограничения внешнего ключа таблицы `questions_practice3`
--
ALTER TABLE `questions_practice3`
  ADD CONSTRAINT `questions_practice3_ibfk_1` FOREIGN KEY (`parent_name_pract3`) REFERENCES `title_practice3` (`id_practice3`) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Ограничения внешнего ключа таблицы `result`
--
ALTER TABLE `result`
  ADD CONSTRAINT `result_ibfk_1` FOREIGN KEY (`id_user`) REFERENCES `user` (`user_id`) ON DELETE CASCADE ON UPDATE CASCADE;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
